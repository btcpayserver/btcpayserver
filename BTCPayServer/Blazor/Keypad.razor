@using System.Text.RegularExpressions
@using System.Globalization
@using System.Text.Json
@using System.Text.Json.Nodes
@using BTCPayServer.Client
@using BTCPayServer.Plugins.PointOfSale.Models
@using Microsoft.AspNetCore.Mvc.Rendering
@inject IJSRuntime JS
@inject IAuthorizationService AuthService
@inject AuthenticationStateProvider AuthStateProvider

<div class="d-flex flex-column gap-4">
    <input type="hidden" name="amount" value="@GetTotal()">
    <input type="hidden" name="tip" value="@GetTip()">
    <input type="hidden" name="discount" value="@GetDiscountPercent()">
    <input type="hidden" name="posdata" value="@GetData()">
    <div class="d-flex flex-column align-items-center px-4 mb-auto" @ref="_keypadTop">
        <div class="fw-semibold text-muted" id="Currency">@CurrencyCode</div>
        <div class="fw-bold lh-sm" id="Amount" style="font-size:@($"{FontSize}px")" @ref="_keypadAmount">@FormatCurrency(GetTotal(), false)</div>
        <div class="text-muted text-center mt-2" id="Calculation">@Calculation(Model)</div>
    </div>
    @if (IsDiscountEnabled || IsTipEnabled)
    {
        <div id="ModeTabs" class="tab-content mb-n2">
            @if (IsDiscountEnabled)
            {
                <div class="tab-pane fade px-2 @(Mode == InputMode.Discount ? "show active" : "")" role="tabpanel" aria-labelledby="ModeTablist-Discount">
                    <div class="h4 fw-semibold text-muted text-center" id="Discount">
                        <span class="h3 text-body me-1">@GetDiscountPercent()%</span> discount
                    </div>
                </div>
            }
            @if (IsTipEnabled)
            {
                var tip = GetTip();
                <div class="tab-pane fade px-2 @(Mode == InputMode.Tip ? "show active" : "")" role="tabpanel" aria-labelledby="ModeTablist-Tip">
                    <div class="btcpay-pills d-flex flex-wrap align-items-center justify-content-center gap-2">
                        @if (CustomTipPercentages != null)
                        {
                            <button
                                id="Tip-Custom"
                                type="button"
                                class="btcpay-pill @(Model.TipPercent == null ? "active" : "")"
                                @onclick="() => Model.TipPercent = null">
                                @(Model.Tip is > 0 ? FormatCurrency(Model.Tip.Value, true) : "Custom")
                            </button>
                            @foreach(var percentage in CustomTipPercentages)
                            {
                                <button
                                    type="button"
                                    id="Tip-@percentage"
                                    class="btcpay-pill @(Model.TipPercent == percentage ? "active" : "")"
                                    @onclick="() => Model.TipPercent = percentage">
                                    @percentage%
                                </button>
                            }
                        }
                        else
                        {
                            <div class="h5 fw-semibold text-muted text-center">
                                Amount@(tip > 0 ? $": {FormatCurrency(tip, true)}" : "")
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div id="ModeTablist" class="nav btcpay-pills align-items-center justify-content-center mb-n2 pb-1" role="tablist">
            @{ var amount = GetAmount(); }
            @foreach (var mode in GetModes())
            {
                <input id="ModeTablist-@mode" name="mode" value="@mode" type="radio" role="tab"
                       aria-controls="Mode-@mode" aria-selected="@(Mode == mode ? "true" : "false")"
                       data-bs-toggle="pill" data-bs-target="#Mode-@mode"
                       checked="@(Mode == mode)"
                       disabled="@(mode != InputMode.Amount && amount == 0)"
                       @onclick="() => Mode = mode">
                <label for="ModeTablist-@mode">@mode</label>
            }
        </div>
    }
    <div class="keypad">
        @foreach (var key in Keys)
        {
            <button disabled="@(key == '+' && Mode != InputMode.Amount)" @onclick="@(e => KeyPress(key))" @onclick:preventDefault @ondblclick="@(e => DoublePress(key))" type="button" class="btn btn-secondary btn-lg" data-key="@key">@key</button>
        }
    </div>
    <button class="btn btn-lg btn-primary mx-3" type="submit" disabled="@IsSubmitting" id="pay-button" @onclick="@(e => { IsSubmitting = true; })">
        @if (IsSubmitting)
        {
            <div class="spinner-border spinner-border-sm" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        }
        else
        {
            <span>Charge</span>
        }
    </button>
    
    @if (CanAccessRecentTransactions)
    {
        <button type="button" class="btn btn-link p-1" data-bs-toggle="modal" data-bs-target="#RecentTransactions" id="RecentTransactionsToggle">
            <Icon Symbol="nav-transactions" />
        </button>
        <div class="modal" tabindex="-1" id="RecentTransactions" ref="RecentTransactions" data-bs-backdrop="static" data-url="@RecentTransactionsUrl">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Recent Transactions</h5>
                        <button type="button" class="btn btn-link px-3 py-0" aria-label="Refresh" @onclick="@LoadRecentTransactions" disabled="@_recentTransactionsLoading" id="RecentTransactionsRefresh">
                            <Icon Symbol="refresh" />
                            @if (_recentTransactionsLoading)
                            {
                                <span class="visually-hidden">Loading...</span>
                            }
                        </button>
                        <button type="button" class="btn-close py-3" aria-label="Close" v-on:click="closeModal">
                            <Icon Symbol="close" />
                        </button>
                    </div>
                    <div class="modal-body">
                        @if (RecentTransactions?.Count > 0)
                        {
                            <div class="list-group list-group-flush">
                                @foreach (var t in RecentTransactions)
                                {
                                    <a href="@t.Url" class="list-group-item list-group-item-action d-flex align-items-center gap-3 pe-1 py-3">
                                        <div class="d-flex align-items-baseline justify-content-between flex-wrap flex-grow-1 gap-2">
                                            <span class="flex-grow-1">@t.Date.ToBrowserDate()</span>
                                            <span class="flex-grow-1 text-end">@t.Price</span>
                                            <div class="badge-container">
                                                <span class="badge badge-@t.Status.ToLowerInvariant()">@t.Status</span>
                                            </div>
                                        </div>
                                        <Icon Symbol="caret-right" />
                                    </a>
                                }
                            </div>
                        }
                        else if (_recentTransactionsLoading)
                        {
                            <p class="text-muted my-0">Loading...</p>
                        }
                        else
                        {
                            <p class="text-muted my-0">No transactions, yet.</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
    
    @if (IsItemlistEnabled && Items?.Any() is true)
    {
        <button type="button" class="btn btn-link p-1" data-bs-toggle="offcanvas" data-bs-target="#ItemsListOffcanvas" id="ItemsListToggle" aria-controls="ItemsList" v-if="showItems">
            <Icon Symbol="nav-products"/>
        </button>
        <div class="offcanvas offcanvas-end" data-bs-backdrop="static" tabindex="-1"  id="ItemsListOffcanvas" aria-labelledby="ItemsListToggle" v-if="showItems">
            <div class="offcanvas-header justify-content-between flex-wrap p-3">
                <h5 class="offcanvas-title" id="offcanvasExampleLabel">Products</h5>
                <button type="button" class="btn btn-sm rounded-pill @(Model.Cart.Count > 0 ? "btn-primary" : "btn-outline-secondary")" data-bs-dismiss="offcanvas">@(Model.Cart.Count > 0 ? "Apply" : "Close")</button>
                @if (IsSearchEnabled)
                {
                    <div class="w-100 mt-3">
                        <InputText id="SearchTerm" class="form-control rounded-pill" placeholder="Searchâ€¦" @bind-Value="Model.SearchTerm" />
                    </div>
                }
                @if (IsCategoriesEnabled && Categories?.Any() is true)
                {
                    <div id="Categories" ref="categories" v-if="showCategories && allCategories" class="w-100 mt-3 btcpay-pills d-flex flex-wrap align-items-center justify-content-center gap-2" :class="{ 'scrollable': categoriesScrollable }">
                        <nav class="btcpay-pills d-flex align-items-center gap-3">
                            @foreach (var cat in Categories)
                            {
                                <input id="Category-@cat.Value" type="radio" name="category" autocomplete="off" value="@cat.Value">
                                <label for="Category-@cat.Value" class="btcpay-pill text-nowrap">@cat.Text</label>
                            }
                        </nav>
                    </div>
                }
            </div>
            <div class="offcanvas-body">
                <div id="PosItems">
                    @for (var index = 0; index < Items.Length; index++)
                    {
                        var item = Items[index];
                        var formatted = GetItemPriceFormatted(item);
                        <div class="posItem p-3 @(InStock(item) ? "posItem--inStock" : null) @(DisplayItem(item) ? "posItem--displayed" : null)">
                            <div class="d-flex align-items-start w-100 gap-3">
                                @if (!string.IsNullOrWhiteSpace(item.Image))
                                {
                                    <div class="img d-none d-sm-block">
                                        <img src="@item.Image" alt="@item.Title" asp-append-version="true" />
                                    </div>
                                }
                                <div class="d-flex flex-column gap-2">
                                    <h5 class="card-title m-0">@item.Title</h5>
                                    <div class="d-flex gap-2 align-items-center">
                                        @if (item.PriceType == ViewPointOfSaleViewModel.ItemPriceType.Topup || item.Price == 0)
                                        {
                                            <span class="fw-semibold badge text-bg-info">@char.ToUpper(formatted[0]) + formatted[1..])</span>
                                        }
                                        else
                                        {
                                            <span class="fw-semibold">@formatted</span>
                                        }
                                        @if (item.Inventory.HasValue)
                                        {
                                            <span class="badge text-bg-warning inventory" v-text="inventoryText(@index)">
                                                @(item.Inventory > 0 ? $"{item.Inventory} left" : "Sold out")
                                            </span>
                                        }
                                    </div>
                                </div>
                                <div class="d-flex align-items-center gap-2 ms-auto quantities">
                                    <button type="button" @onclick="() => UpdateQuantity(item, -1)" class="btn btn-minus" disabled="@(GetQuantity(item) <= 0)">
                                        <span><Icon Symbol="minus" /></span>
                                    </button>
                                    <div class="quantity text-center fs-5" style="width:2rem">@GetQuantity(item)</div>
                                    <button type="button" @onclick="() => UpdateQuantity(item, +1)" class="btn btn-plus" disabled="@(!InStock(item))">
                                        <span><Icon Symbol="plus" /></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
#nullable enable
    [Parameter, EditorRequired]
    public string StoreId { get; set; } = null!;
    [Parameter, EditorRequired]
    public string AppId { get; set; } = null!;
    [Parameter, EditorRequired]
    public string CurrencyCode { get; set; } = null!;
    [Parameter]
    public NumberFormatInfo? CurrencyInfo { get; set; }
    [Parameter]
    public bool IsItemlistEnabled { get; set; }
    [Parameter]
    public bool IsDiscountEnabled { get; set; }
    [Parameter]
    public bool IsTipEnabled { get; set; }
    [Parameter]
    public bool IsSearchEnabled { get; set; }
    [Parameter]
    public bool IsCategoriesEnabled { get; set; }
    [Parameter]
    public int[]? CustomTipPercentages { get; set; }
    [Parameter]
    public SelectList? Categories { get; set; }
    [Parameter]
    public ViewPointOfSaleViewModel.Item[]? Items { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    private bool IsSubmitting { get; set; }
    private bool CanAccessRecentTransactions { get; set; }
    private List<RecentTransaction>? RecentTransactions { get; set; }

    const int DefaultFontSize = 64;
    static readonly char[] Keys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'C', '0', '+'];
    private int FontSize { get; set; } = DefaultFontSize;

    public enum InputMode
    {
        Amount,
        Discount,
        Tip
    }

    private ElementReference _keypadTop;
    private ElementReference _keypadAmount;
    private string? _currencySymbol;
    private int _currencyDivisibility;
    private bool _recentTransactionsLoading;
    private InputMode Mode { get; set; } = InputMode.Amount;
    private KeypadModel Model { get; set; } = new ();
    private string? RecentTransactionsUrl => null;

    public class KeypadModel
    {
        public List<CartItem> Cart { get; set; } = [];
        public List<decimal> Amounts { get; set; } = [0];
        public int? DiscountAmount { get; set; }
        public int? DiscountPercent { get; set; }
        public int? TipPercent { get; set; }
        public decimal? Tip { get; set; }
        public string? SearchTerm { get; set; }
        public string[]? SelectedCategories { get; set; }
    }

    public class RecentTransaction
    {
        public string Id { get; set; }
        public DateTimeOffset Date { get; set; }
        public string Url { get; set; }
        public string Price { get; set; }
        public string Status { get; set; }
    }

    public class CartItem
    {
        public string Id { get; set; }
        public string Title { get; set; }
        public decimal Price { get; set; }
        public int Count { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        _currencySymbol = CurrencyInfo?.CurrencySymbol ?? CurrencyCode;
        _currencyDivisibility = CurrencyInfo?.CurrencyDecimalDigits ?? 0;

        // check authorization
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated is not true) return;
        
        CanAccessRecentTransactions = (await AuthService.AuthorizeAsync(authState.User, StoreId, Policies.CanViewInvoices)).Succeeded;
    }

    private async Task KeyPress(char key)
    {
        if (Mode == InputMode.Amount) {
            var lastIndex = Model.Amounts.Count - 1;
            var lastAmount = Model.Amounts[lastIndex];
            if (key == 'C') {
                if (lastAmount == 0 && lastIndex == 0) {
                    // clear completely
                    Clear();
                } else if (lastAmount == 0) {
                    // remove latest value
                    Model.Amounts.RemoveAt(lastIndex);
                } else {
                    // clear latest value
                    Model.Amounts[lastIndex] = 0;
                }
            } else if (key == '+' && lastAmount != 0) {
                Model.Amounts.Add(0);
            } else { // Is a digit
                Model.Amounts[lastIndex] = Math.Min(ApplyKeyToValue(key, lastAmount, _currencyDivisibility), decimal.MaxValue / 10);
            }
        } else {
            if (key == 'C') {
                if (Mode == InputMode.Tip)
                {
                    Model.Tip = null;
                    Model.TipPercent = null;
                }
                else
                {
                    Model.DiscountPercent = null;
                }
            } else {
                var divisibility = Mode == InputMode.Tip ? _currencyDivisibility : 0;
                if (Mode == InputMode.Tip)
                {
                    Model.Tip = Math.Min(ApplyKeyToValue(key, Model.Tip ?? 0, divisibility), decimal.MaxValue / 10);
                    Model.TipPercent = null;
                }
                else
                {
                    var num = (int)ApplyKeyToValue(key, Model.DiscountPercent ?? 0, divisibility);
                    Model.DiscountPercent = Math.Min(num, 100);
                }
            }
        }
        await UpdateFontSize();
    }

    private decimal ApplyKeyToValue(char key, decimal value, int divisibility)
    {
        var str = value is 0 ? "" : FormattedInvariant(value, divisibility);
        str = (str + key).Replace(".", "");
        if (divisibility > 0)
        {
            str = str.PadLeft(divisibility + 1, '0');
            str = Regex.Replace(str, $"(\\d*)(\\d{{{divisibility}}})", "$1.$2");
        }

        return decimal.Parse(str, CultureInfo.InvariantCulture);
    }

    private void DoublePress(char key)
    {
        if (key == 'C') {
            Clear();
        }
    }

    private void Clear()
    {
        Model.Cart.Clear();
        Model.Amounts.Clear();
        Model.Amounts.Add(0);
        Model.DiscountPercent = null;
        Model.TipPercent = null;
        Model.Tip = null;
        Mode = InputMode.Amount;
    }

    private string GetData()
    {
        var data = new JsonObject
        {
            ["subTotal"] = GetAmount(),
            ["total"] = GetTotal(),
            ["cart"] = JsonValue.Create(Model.Cart)
        };

        // clear empty or zero values
        var amounts = Model.Amounts.Where(a => a > 0).ToList();
        if (amounts.Count > 0)
        {
            data["amounts"] = JsonValue.Create(amounts);
        }

        var discount = GetDiscount();
        if (discount > 0)
        {
            data["discountAmount"] = discount;
        }
        if (Model.DiscountPercent is > 0)
        {
            data["discountPercentage"] = Model.DiscountPercent;
        }

        var tip = GetTip();
        if (tip > 0)
        {
            data["tip"] = tip;
        }
        if (Model.TipPercent != null)
        {
            data["tipPercentage"] = Model.TipPercent;
        }
        return JsonSerializer.Serialize(data);
    }

    private List<InputMode> GetModes()
    {
        var modes = new List<InputMode> { InputMode.Amount };
        if (IsDiscountEnabled) modes.Add(InputMode.Discount);
        if (IsTipEnabled) modes.Add(InputMode.Tip);
        return modes;
    }

    private decimal GetAmount()
    {
        return Model.Amounts.Count > 0 ? Model.Amounts.Sum() : Model.Amounts.FirstOrDefault();
    }

    private decimal GetDiscount()
    {
        var amount = GetAmount();
        return amount > 0 && Model.DiscountPercent is > 0
            ? Math.Round(amount * (Model.DiscountPercent.Value / 100.0m), _currencyDivisibility)
            : 0;
    }
    
    private int GetDiscountPercent()
    {
        return Model.DiscountPercent ?? 0;
    }

    private decimal GetTip()
    {
        if (Model.TipPercent is > 0) {
            var amount = GetAmount() - GetDiscount();
            return Math.Round(amount * (Model.TipPercent.Value / 100.0m), _currencyDivisibility);
        }
        return Model.Tip is > 0 ? Math.Round(Model.Tip.Value, _currencyDivisibility) : 0.0m;
    }

    private decimal GetTotal()
    {
        return GetAmount() - GetDiscount() + GetTip();
    }

    private string? Calculation(KeypadModel model)
    {
        if (!model.Tip.HasValue && !(model.DiscountAmount is > 0 || model.DiscountPercent is > 0) && model.Amounts.Count < 2 && model.Cart.Count == 0) return null;
        var hasAmounts = model.Amounts.Sum() > 0;
        var hasCart = model.Cart.Count > 0;
        var calc = "";
        if (hasCart) calc += string.Join(" + ", model.Cart.Select(item => $"{item.Count} x ${item.Title} ({FormatCurrency(item.Price, true)}) = {FormatCurrency(item.Price * item.Count, true)}"));
        if (hasCart && hasAmounts) calc += " + ";
        if (hasAmounts) calc += string.Join(" + ", model.Amounts.Select(amt => FormatCurrency(amt, true)));
        var discount = GetDiscount();
        if (discount > 0) calc += $" - {FormatCurrency(discount, true)} ({model.DiscountPercent}%)";
        var tip = GetTip();
        if (tip > 0) calc += $" + {FormatCurrency(tip, true)}";
        if (model.TipPercent > 0) calc += $" ({model.TipPercent}%)";
        return calc;
    }

    private string FormatCurrency(decimal value, bool withSymbol)
    {
        if (CurrencyCode is "BTC" or "SATS") return FormatCrypto(value, withSymbol);
        try {
            var formatted = value.ToString("C", CurrencyInfo);
            return withSymbol ? formatted : formatted.Replace(_currencySymbol, "").Trim();
        }
        catch (Exception)
        {
            return FormatCrypto(value, withSymbol);
        }
    }

    private string FormatCrypto(decimal value, bool withSymbol) {
        var symbol = withSymbol ? $" {_currencySymbol}" : "";
        return $"{FormattedInvariant(value, _currencyDivisibility)}{symbol}";
    }

    private string FormattedInvariant(decimal value, int divisibility) {
        return string.Format(CultureInfo.InvariantCulture, $"{{0:0.{new string('0', divisibility)}}}", value);
    }

    private async Task UpdateFontSize()
    {
        var top = await JS.InvokeAsync<decimal>("Interop.getWidth", [_keypadTop]);
        var amt = await JS.InvokeAsync<decimal>("Interop.getWidth", [_keypadAmount]);
        var gamma = top / amt;

        FontSize = (int)(top < amt
            ? Math.Floor(FontSize * gamma)
            : Math.Min(FontSize * gamma, DefaultFontSize));

        StateHasChanged();
    }
    
    private bool DisplayItem(ViewPointOfSaleViewModel.Item item)
    {
        if (string.IsNullOrWhiteSpace(Model.SearchTerm)) return InStock(item);
        var search = Model.SearchTerm.ToLowerInvariant();
        return item.Title.ToLowerInvariant().Contains(search) || item.Description?.ToLowerInvariant().Contains(search) is true;
    }
    
    private string GetItemPriceFormatted(ViewPointOfSaleViewModel.Item item)
    {
        if (item.PriceType == ViewPointOfSaleViewModel.ItemPriceType.Topup) return "any amount";
        if (item.Price == 0) return "free";
        var formatted = FormatCurrency(item.Price ?? 0, true);
        return item.PriceType == ViewPointOfSaleViewModel.ItemPriceType.Minimum ? $"{formatted} minimum" : formatted;
    }
    
    private CartItem? ItemInCart(ViewPointOfSaleViewModel.Item item, decimal? amount = null)
    {
        return Model.Cart.FirstOrDefault(lineItem => lineItem.Id == item.Id && amount == null || lineItem.Price == amount);
    }
    
    private bool InStock(ViewPointOfSaleViewModel.Item item, int count = 1)
    {
        return item.Inventory == null || item.Inventory >= GetQuantity(item) + count;
    }
    
    private string InventoryText(ViewPointOfSaleViewModel.Item item)
    {
        var inCart = GetQuantity(item);
        var left = item.Inventory - inCart;
        return left > 0 ? $"{item.Inventory} left" : "Sold out";
    }
    
    private CartItem? AddToCart(ViewPointOfSaleViewModel.Item item, int count, decimal? amount = null) {
        if (!InStock(item)) return null;
        // Check if price is needed
        var isFixedPrice = item.PriceType == ViewPointOfSaleViewModel.ItemPriceType.Fixed;
        if (!isFixedPrice && amount == null) {
            // TODO: Report validation error
        }

        var price = (item.Price ?? amount)!.Value;
        var cartItem = ItemInCart(item, amount);
        if (cartItem == null)
        {
            cartItem = new CartItem
            {
                Id = item.Id,
                Title = item.Title,
                Price = price,
                Count = count
            };
            Model.Cart.Add(cartItem);
        } else {
            cartItem.Count += count;
        }
        return cartItem;
    }

    private void RemoveFromCart(ViewPointOfSaleViewModel.Item item) {
        var cartItem = ItemInCart(item);
        if (cartItem != null) RemoveFromCart(cartItem);
    }

    private void RemoveFromCart(CartItem cartItem) {
        Model.Cart.Remove(cartItem);
    }
    
    private int GetQuantity(ViewPointOfSaleViewModel.Item item) {
        return ItemInCart(item)?.Count ?? 0;
    }
    
    private void UpdateQuantity(ViewPointOfSaleViewModel.Item item, int count) {
        var cartItem = ItemInCart(item);
        if (cartItem == null)
        {
            if (count > 0) AddToCart(item, count);
            return;
        }
        if (count < 0 || count > 0 && InStock(item, count)) cartItem.Count += count;
        if (cartItem.Count <= 0) RemoveFromCart(cartItem);
    }

    private async Task LoadRecentTransactions()
    {
        _recentTransactionsLoading = true;
        StateHasChanged();
        RecentTransactions = null;
        _recentTransactionsLoading = false;
        StateHasChanged();
    }
}

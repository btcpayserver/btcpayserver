@using System.Threading
@using Microsoft.AspNetCore.Mvc.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer stringLocalizer
@inject ViewLocalizer viewLocalizer
@inject IJSRuntime jsRuntime
@inject IServiceProvider serviceProvider
@implements IDisposable

@foreach (var e in this.Elements)
{
    if (e is VaultElement.PinInput pe)
    {
        <div id="pin-input" class="mt-4">
            <div class="row">
                <div class="col">
                    <div class="input-group mb-2">
                        <input id="pin-display" @bind="pe.Display" type="text" class="form-control" readonly>
                        <div id="pin-display-delete" class="input-group-text cursor-pointer">
                            <vc:icon symbol="actions-remove" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="pin-button" id="pin-7" @onclick="() => pe.Click(7)"></div>
                </div>
                <div class="col">
                    <div class="pin-button" id="pin-8" @onclick="() => pe.Click(8)"></div>
                </div>
                <div class="col">
                    <div class="pin-button" id="pin-9" @onclick="() => pe.Click(9)"></div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="pin-button" id="pin-4" @onclick="() => pe.Click(4)"></div>
                </div>
                <div class="col">
                    <div class="pin-button" id="pin-5" @onclick="() => pe.Click(5)"></div>
                </div>
                <div class="col">
                    <div class="pin-button" id="pin-6" @onclick="() => pe.Click(6)"></div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="pin-button" id="pin-1" @onclick="() => pe.Click(1)"></div>
                </div>
                <div class="col">
                    <div class="pin-button" id="pin-2" @onclick="() => pe.Click(2)"></div>
                </div>
                <div class="col">
                    <div class="pin-button" id="pin-3" @onclick="() => pe.Click(3)"></div>
                </div>
            </div>
        </div>
        <button id="vault-confirm" class="btn btn-primary mt-4" type="button" @onclick="pe.OnConfirmPinClick">@StringLocalizer["Confirm"]</button>
    }
    else if (e is VaultElement.Passphrase passEl)
    {
        <div id="passphrase-input" class="mt-4">
            <div class="form-group">
                <label for="Password" class="form-label">@StringLocalizer["Passphrase (Leave empty if there isn't any passphrase)"]</label>
                <div class="input-group">
                    <input id="Password" @bind="passEl.Password" type="password" class="form-control">
                    <button type="button" class="btn btn-secondary px-3 only-for-js" title="@StringLocalizer["Toggle passphrase visibility"]"
                            data-toggle-password="#Password">
                        <Icon Symbol="actions-show"></Icon>
                    </button>
                </div>
            </div>
            <div class="form-group">
                <label for="PasswordConfirmation" class="form-label">@StringLocalizer["Passphrase confirmation"]</label>
                <div class="input-group">
                    <input id="PasswordConfirmation" @bind="passEl.PasswordConfirmation" type="password" class="form-control">
                    <button type="button" class="btn btn-secondary px-3 only-for-js" title="@StringLocalizer["Toggle passphrase visibility"]"
                            data-toggle-password="#PasswordConfirmation">
                        <Icon Symbol="actions-show"></Icon>
                    </button>
                </div>
                @if (passEl.Error != "")
                {
                    <span class="text-danger">@passEl.Error</span>
                }
            </div>
            <button id="vault-confirm" class="btn btn-primary mt-4" type="button" @onclick="passEl.OnConfirmPasswordClick">@StringLocalizer["Confirm"]</button>
        </div>
    }
    else if (e is VaultElement.Feedback f)
    {
        <div class="vault-feedback mb-2 d-flex align-items-center">
            <Icon Class=@($"vault-feedback-icon icon me-2 {f.GetClass()}") Symbol="@f.GetSymbol()"></Icon>
            <span class="vault-feedback-content flex-grow">
				@if (f.Html is not null)
                {
                    @((MarkupString)f.Html)
                }
                else if (f.Text is not null)
                {
                    @f.Text
                }
            </span>
        </div>
    }
    else if (e is VaultElement.Warning w)
    {
        <div id="walletAlert" class="alert alert-warning alert-dismissible my-4" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="@StringLocalizer["Close"]">
                <Icon Symbol="close"></Icon>
            </button>
            <span id="alertMessage">
                @((MarkupString)w.Html)
            </span>
        </div>
    }
    else if (e is VaultElement.XPubSelect x)
    {
        <div id="vault-xpub" class="mt-4">
            <div class="form-group">
                <label for="addressType" class="form-label">@StringLocalizer["Address type"]</label>
                <select id="addressType" @bind="x.AddressType" name="addressType" class="form-select w-auto">
                    @if (x.CanUseSegwit)
                    {
                        <option value="segwit">@StringLocalizer["Segwit (Recommended, cheapest fee)"]</option>
                        <option value="segwitWrapped">@StringLocalizer["Segwit wrapped (Compatible with old wallets)"]</option>
                    }
                    <option value="legacy">@StringLocalizer["Legacy (Not recommended)"]</option>
                    @if (x.CanUseTaproot)
                    {
                        <option value="taproot" text-translate="true">@StringLocalizer["Taproot"]</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <label for="accountNumber" class="form-label" text-translate="true">Account</label>
                <input id="accountNumber" @bind="x.AccountNumber" class="form-control" name="accountNumber" type="number" min="0" step="1"
                       style="max-width:12ch;" />
            </div>
        </div>
        <button id="vault-confirm" class="btn btn-primary mt-4" type="button" @onclick="x.OnConfirmXPubClick">@StringLocalizer["Confirm"]</button>
    }
    else if (e is VaultElement.Retry)
    {
        <button id="vault-retry" class="btn btn-secondary mt-4" type="button" @onclick="OnRetryClick">@StringLocalizer["Retry"]</button>
    }
    else if (e is VaultElement.VerifyAddress va)
    {
        if (va.ConfirmedOnDevice)
        {
            <button id="vault-confirm" class="btn btn-primary mt-4" type="button" @onclick="va.OnConfirm">@StringLocalizer["Confirm"]</button>
        }
        else
        {
            <button id="vault-confirm" class="btn btn-primary mt-4" type="button" disabled="disabled">@StringLocalizer["Please, confirm on the device first..."]</button>
        }
    }
}

@code {
    [Parameter] public IController Controller { get; set; }

    public List<VaultElement> Elements { get; set; } = new List<VaultElement>();

    private async Task Connect()
    {
        try
        {
            await Controller.Run(this, CancellationToken);
        }
        catch when (CancellationToken.IsCancellationRequested)
        {
        }
        catch (Exception e)
        {
            this.ShowFeedback(VaultElement.Feedback.StateValue.Failed, StringLocalizer["An unexpected error happened: {0}", e.Message]);
            if (e is VaultClient.VaultException)
                ShowRetry();
            else
                throw;
        }
    }

    public void ShowRetry()
    {
        if (!Elements.OfType<VaultElement.Retry>().Any())
        {
            Elements.Add(new VaultElement.Retry());
            this.StateHasChanged();
        }
    }

    public void AddWarning(LocalizedHtmlString str)
    {
        Elements.Insert(0, new VaultElement.Warning(str));
        this.StateHasChanged();
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Connect();
    }

    private async Task OnRetryClick()
    {
        Elements.Clear();
        await Connect();
    }

    public void ShowFeedback(VaultElement.Feedback.StateValue state, LocalizedString str)
    {
        var feedback = new VaultElement.Feedback(str, state);
        ShowFeedback(feedback);
    }
    public void ShowFeedback(VaultElement.Feedback.StateValue state, LocalizedHtmlString str)
    {
        var feedback = new VaultElement.Feedback(str, state);
        ShowFeedback(feedback);
    }
    public void ShowFeedback(VaultElement.Feedback feedback)
    {
        var lastFeedback =(VaultElement.Feedback)(Elements.FindLastIndex(e => e is VaultElement.Feedback) switch
        {
            int i when i >= 0 => Elements[i],
            _ => null
        });
        
        if (lastFeedback is null || lastFeedback.State == VaultElement.Feedback.StateValue.Success)
        {
            Elements.Add(feedback);
        }
        else
        {
            // Replace the last non successful feedback by the new one
            for (int i = Elements.Count - 1; i >= 0; i--)
            {
                if (Elements[i] == lastFeedback)
                    break;
                Elements.RemoveAt(i);
            }
            Elements[^1] = feedback;
        }
        this.StateHasChanged();
    }

    public void AddElement(VaultElement el)
    {
        Elements.Add(el);
        this.StateHasChanged();
    }

    CancellationTokenSource _Cts = new CancellationTokenSource();
    public CancellationToken CancellationToken => _Cts.Token;
    public IStringLocalizer StringLocalizer => stringLocalizer;
    public ViewLocalizer ViewLocalizer => viewLocalizer;
    public IJSRuntime JSRuntime => jsRuntime;
    public IServiceProvider ServiceProvider => serviceProvider;
    public void Dispose()
    {
        _Cts.Cancel();
        foreach (var el in Elements.OfType<IDisposable>())
        {
            el.Dispose();
        }
    }

}

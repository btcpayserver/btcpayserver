@using BTCPayServer.Services.Apps
@using BTCPayServer.Components.AppSales
@inject BTCPayServer.Security.ContentSecurityPolicies Csp
@model BTCPayServer.Components.AppSales.AppSalesViewModel
@{
    var controller = $"UI{Model.AppType}";
    var action = $"Update{Model.AppType}";
    var label = Model.AppType == "Crowdfund" ? "Contributions" : "Sales";
}

<div id="AppSales-@Model.Id" class="widget app-sales">
    <header class="mb-3">
        <h3>@Model.Name @label</h3>
        <a asp-controller="@controller" asp-action="@action" asp-route-appId="@Model.Id">Manage</a>
    </header>
    @if (Model.InitialRendering)
    {
        <div class="loading d-flex justify-content-center p-3">
            <div class="spinner-border text-light" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <script>
            (async () => {
                const url = @Safe.Json(Model.Url);
                const appId = @Safe.Json(Model.Id);
                const response = await fetch(url);
                if (response.ok) {
                    document.getElementById(`AppSales-${appId}`).outerHTML = await response.text();
                    const data = document.querySelector(`#AppSales-${appId} template`);
					if (data) window.appSales.dataLoaded(JSON.parse(data.innerHTML));
                }
            })();
			if (!window.appSales)
			{
				window.appSales = 
				{
					dataLoaded: function(model) 
					{
						const id = "AppSales-" + model.id;
						const appId = model.id;
						const period = model.period;
						const baseUrl = model.url;
						const data = model;

						const render = (data, period) => {
							const series = data.series.map(s => s.salesCount);
							const labels = data.series.map((s, i) => period === model.period ? s.label : (i % 5 === 0 ? s.label : ''));
							const min = Math.min(...series);
							const max = Math.max(...series);
							const low = min === max ? 0 : Math.max(min - ((max - min) / 5), 0);

							document.querySelectorAll(`#${id} .sales-count`).innerText = data.salesCount;

							new Chartist.Bar(`#${id} .ct-chart`, {
								labels,
								series: [series]
							}, {
								low,
							});
						};

						render(data, period);

						const update = async period => {
							const url = `${baseUrl}/${period}`;
							const response = await fetch(url);
							if (response.ok) {
								const data = await response.json();
								render(data, period);
							}
						};

						delegate('change', `#${id} [name="AppSalesPeriod-${appId}"]`, async e => {
							const type = e.target.value;
							await update(type);
						});
					}
				};
			}
        </script>
    }
    else
    {
        <header class="mb-3">
            <span>
                <span class="sales-count">@Model.SalesCount</span> Total @label
            </span>
            <div class="btn-group only-for-js" role="group" aria-label="Filter">
                <input type="radio" class="btn-check" name="AppSalesPeriod-@Model.Id" id="AppSalesPeriodWeek-@Model.Id" value="@AppSalesPeriod.Week" @(Model.Period == AppSalesPeriod.Week ? "checked" : "")>
                <label class="btn btn-link" for="AppSalesPeriodWeek-@Model.Id">1W</label>
                <input type="radio" class="btn-check" name="AppSalesPeriod-@Model.Id" id="AppSalesPeriodMonth-@Model.Id" value="@AppSalesPeriod.Month" @(Model.Period == AppSalesPeriod.Month ? "checked" : "")>
                <label class="btn btn-link" for="AppSalesPeriodMonth-@Model.Id">1M</label>
            </div>
        </header>
        <div class="ct-chart"></div>
        <template>
            @Safe.Json(Model)
        </template>
    }
</div>

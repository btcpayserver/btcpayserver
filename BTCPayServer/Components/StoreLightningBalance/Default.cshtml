@model BTCPayServer.Components.StoreLightningBalance.StoreLightningBalanceViewModel

<div id="StoreLightningBalance-@Model.Store.Id" class="widget store-lightning-balance">
    <div class="d-flex gap-3 align-items-center justify-content-between mb-2">
        <h6>Lightning Balance</h6>
        @if (Model.CryptoCode != Model.DefaultCurrency)
        {
            <div class="btn-group btn-group-sm gap-0 currency-toggle" role="group">
                <input type="radio" class="btn-check" name="StoreLightningBalance-currency" id="StoreLightningBalance-currency_@Model.CryptoCode" value="@Model.CryptoCode" autocomplete="off" checked>
                <label class="btn btn-outline-secondary px-2 py-1" for="StoreLightningBalance-currency_@Model.CryptoCode">@Model.CryptoCode</label>
                <input type="radio" class="btn-check" name="StoreLightningBalance-currency" id="StoreLightningBalance-currency_@Model.DefaultCurrency" value="@Model.DefaultCurrency" autocomplete="off">
                <label class="btn btn-outline-secondary px-2 py-1" for="StoreLightningBalance-currency_@Model.DefaultCurrency">@Model.DefaultCurrency</label>
            </div>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(Model.ProblemDescription))
    {
        <p>@Model.ProblemDescription</p>
    }
    else if (Model.Balance != null)
    {
        <div class="loading d-flex justify-content-center p-3">
            <div class="spinner-border text-light" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <p class="problemDescription" hidden>@Model.ProblemDescription</p>
        <div class="balances d-flex flex-wrap" hidden>
            <div class="balance" id="StoreLightningBalanceOffchain-@Model.Store.Id" hidden>
                <h3 class="d-inline-block me-1"></h3>
                <span class="text-secondary fw-semibold text-nowrap"><span class="currency">@Model.CryptoCode</span> in channels</span>
                <div class="balance-details collapse" id="balanceDetailsOffchain">
                    <div class="opening mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> opening channels</span>
                    </div>
                    <div class="local mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> local balance</span>
                    </div>
                    <div class="remote mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> remote balance</span>
                    </div>
                    <div class="closing mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> closing channels</span>
                    </div>
                </div>
            </div>
            <div class="balance" id="StoreLightningBalanceOnchain-@Model.Store.Id" hidden>
                <h3 class="d-inline-block me-1"></h3>
                <span class="text-secondary fw-semibold text-nowrap"><span class="currency">@Model.CryptoCode</span> on-chain</span>
                <div class="balance-details collapse" id="balanceDetailsOnchain">
                    <div class="confirmed mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> confirmed</span>
                    </div>
                    <div class="unconfirmed mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> unconfirmed</span>
                    </div>
                    <div class="reserved mt-2" hidden>
                        <span class="fw-semibold"></span>
                        <span class="text-secondary text-nowrap"><span class="currency">@Model.CryptoCode</span> reserved</span>
                    </div>
                </div>
            </div>
        </div>
        <a class="d-none mt-3 details-link" role="button" data-bs-toggle="collapse" data-bs-target=".balance-details" aria-expanded="false" aria-controls="balanceDetailsOffchain balanceDetailsOnchain">Show details</a>
        <script>
            (function () {
                const storeId = @Safe.Json(Model.Store.Id);
                const cryptoCode = @Safe.Json(Model.CryptoCode);
                const defaultCurrency = @Safe.Json(Model.DefaultCurrency);
                const divisibility = @Safe.Json(Model.CurrencyData.Divisibility);
                const pathBase = @Safe.Json(Context.Request.PathBase);
                let data = { balance: null };
                let rate = null;
                
                const $tile = document.getElementById(`StoreLightningBalance-${storeId}`);
                const $balanceOnchain = document.getElementById(`StoreLightningBalanceOnchain-${storeId}`);
                const $balanceOffchain = document.getElementById(`StoreLightningBalanceOffchain-${storeId}`);
                
                const id = `StoreLightningBalance-${storeId}`;
                const url = @Safe.Json(Url.Action("LightningBalance", "UIStores", new { storeId = Model.Store.Id, cryptoCode = Model.CryptoCode }));
                const displayMsat = msat => parseInt(msat, 10) / 100000000000
                const render = (data, rate) => {
                    let { balance, totalOnchain, totalOffchain, problemDescription } = data;
                    if (balance) {
                        $tile.querySelector('.balances').removeAttribute('hidden'); 
                        
                        if (balance.offchainBalance) {
                            $balanceOffchain.querySelector('h3').innerText = rate
                                ? displayDefaultCurrency(toDefaultCurrency(totalOffchain, rate), defaultCurrency)
                                : displayMsat(totalOffchain);
                            $balanceOffchain.removeAttribute('hidden');
                            
                            ['opening', 'local', 'remote', 'closing'].forEach(t => {
                                const value = balance.offchainBalance[t]
                                if (value) {
                                    $balanceOffchain.querySelector(`.${t} .fw-semibold`).innerText = rate
                                        ? displayDefaultCurrency(toDefaultCurrency(value, rate), defaultCurrency)
                                        : displayMsat(value);
                                    $balanceOffchain.querySelector(`.${t}`).removeAttribute('hidden'); 
                                }
                            });
                        }
                        
                        if (balance.onchainBalance) {
                            $balanceOnchain.querySelector('h3').innerText = rate
                                ? displayDefaultCurrency(toDefaultCurrency(totalOnchain, rate), defaultCurrency)
                                : displayMsat(totalOnchain);
                            $balanceOnchain.removeAttribute('hidden');
                            ['confirmed', 'unconfirmed', 'reserved'].forEach(t => {
                                const value = balance.onchainBalance[t]
                                if (value) {
                                    $balanceOnchain.querySelector(`.${t} .fw-semibold`).innerText = rate
                                        ? displayDefaultCurrency(toDefaultCurrency(value, rate), defaultCurrency)
                                        : displayMsat(value);
                                    $balanceOnchain.querySelector(`.${t}`).removeAttribute('hidden'); 
                                }
                            });
                        }
                        
                        if (totalOffchain || totalOnchain) {
                            $tile.querySelector('.details-link').classList.add('d-inline-block'); 
                            $tile.querySelector('.details-link').classList.remove('d-none'); 
                        }
                    } else if (problemDescription) {
                        $tile.querySelector('.problemDescription').innerText = problemDescription;
                        $tile.querySelector('.problemDescription').removeAttribute('hidden'); 
                    }
                    if (cryptoCode !== defaultCurrency) {
                        const currency =  rate ? defaultCurrency : cryptoCode;
                        $tile.querySelectorAll('.currency').forEach(c => c.innerText = currency) 
                    }
                };
                
                const update = async () => {
                    const response = await fetch(url);
                    if (response.ok) {
                        data = await response.json();
                        render(data);
                        
                        $tile.querySelector('.loading').remove(); 
                    }
                };
                
                const toDefaultCurrency = (value, rate) => {
                    return Number.parseFloat((value * rate) / 100000000000).toFixed(divisibility);
                };
                
                const displayDefaultCurrency = (value, currency) => {
                    const locale = currency === "USD" ? 'en-US' : navigator.language;
                    const opts = { currency, style: 'decimal', minimumFractionDigits: divisibility };
                    return new Intl.NumberFormat(locale, opts).format(value);
                };
                
                update();
            
                document.addEventListener('DOMContentLoaded', () => {
                    delegate('change', `#${id} .currency-toggle input`, async e => {
                        const { target } = e;
                        if (target.value === defaultCurrency) {
                            const currencyPair = `${cryptoCode}_${defaultCurrency}`;
                            const response = await fetch(`${pathBase}/api/rates?storeId=${storeId}&currencyPairs=${currencyPair}`);
                            const json = await response.json();
                            rate = json[0] && json[0].rate;
                            if (rate) {
                                render(data, rate);
                            } else {
                                console.warn(`Fetching rate for ${currencyPair} failed.`);
                            }
                        } else {
                            render(data, null);
                        }
                    });
                });
            })();
        </script>
    }
    else
    {
        <div class="loading d-flex justify-content-center p-3">
            <div class="spinner-border text-light" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        <script>
            (async () => {
                const url = @Safe.Json(Url.Action("LightningBalance", "UIStores", new { storeId = Model.Store.Id, cryptoCode = Model.CryptoCode }));
                const storeId = @Safe.Json(Model.Store.Id);
                const response = await fetch(url);
                if (response.ok) {
                    document.getElementById(`StoreLightningBalance-${storeId}`).outerHTML = await response.text();
                }
            })();
        </script>
    }
</div>
<script>
    (function () {
        const storeId = @Safe.Json(Model.Store.Id);
        const cryptoCode = @Safe.Json(Model.CryptoCode);
        const defaultCurrency = @Safe.Json(Model.DefaultCurrency);
        const divisibility = @Safe.Json(Model.CurrencyData.Divisibility);
        const id = `StoreLightningBalance-${storeId}`;
        
        const render = rate => {
            const currency = rate ? defaultCurrency : cryptoCode;
            document.querySelectorAll(`#${id} .currency`).forEach(c => c.innerText = currency) 
            document.querySelectorAll(`#${id} [data-balance]`).forEach(c => {
                const value = Number.parseFloat(c.dataset.balance);
                c.innerText = rate
                    ? DashboardUtils.displayDefaultCurrency(value, rate, currency, divisibility)
                    : value
            });
        };
        
        document.addEventListener('DOMContentLoaded', () => {
            delegate('change', `#${id} .currency-toggle input`, async e => {
                const { target } = e;
                if (target.value === defaultCurrency) {
                    const rate = await DashboardUtils.fetchRate(`${cryptoCode}_${defaultCurrency}`);
                    if (rate) render(rate);
                } else {
                    render(null);
                }
            });
        });
    })();
</script>


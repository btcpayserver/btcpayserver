@using Microsoft.AspNetCore.Mvc.TagHelpers
@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Services
@inject SignInManager<ApplicationUser> SignInManager
@inject BTCPayServerEnvironment Env
@inject IFileService FileService
@model BTCPayServer.Components.StoreSelector.StoreSelectorViewModel
@functions {
    @* ReSharper disable once CSharpWarnings::CS1998 *@
	#pragma warning disable 1998
    private async Task LogoContent()
    {
        <vc:main-logo />
        @if (Env.NetworkType != NBitcoin.ChainName.Mainnet)
        {
            var type = Env.NetworkType.ToString();
            <small class="badge bg-warning rounded-pill ms-1 ms-sm-0" title="@type">@type.Replace("Testnet", "TN").Replace("Regtest", "RT")</small>
        }
    }
    private static string StoreName(string title)
    {
        return string.IsNullOrEmpty(title) ? "Unnamed Store" : title;
    }
	#pragma warning restore 1998
}
@if (Model.CurrentStoreId == null)
{
    <a asp-controller="UIHome" asp-action="Index" id="StoreSelectorHome" class="navbar-brand py-2">@{await LogoContent();}</a>
}
else if (Model.CurrentStoreIsOwner)
{
    <a asp-controller="UIStores" asp-action="Dashboard" asp-route-storeId="@Model.CurrentStoreId" id="StoreSelectorHome" class="navbar-brand py-2">@{await LogoContent();}</a>
}
else
{
    <a asp-controller="UIInvoice" asp-action="ListInvoices" asp-route-storeId="@Model.CurrentStoreId" id="StoreSelectorHome" class="navbar-brand py-2">@{await LogoContent();}</a>
}

<div id="StoreSelector">
    @if (Model.Options.Count > 0)
    {
        <div id="StoreSelectorDropdown" class="dropdown only-for-js">
            <button id="StoreSelectorToggle" class="btn btn-secondary dropdown-toggle rounded-pill px-3 @(Model.CurrentStoreId == null ? "text-secondary" : "")" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @if (!string.IsNullOrEmpty(Model.CurrentStoreLogoFileId))
                {
                    <img class="logo" src="@(await FileService.GetFileUrl(Context.Request.GetAbsoluteRootUri(), Model.CurrentStoreLogoFileId))" alt="@Model.CurrentDisplayName" />
                }
                else
                {
                    <vc:icon symbol="store"/>
                }
                <span>@(Model.CurrentStoreId == null ? "Select Store" : Model.CurrentDisplayName)</span>
                <vc:icon symbol="caret-down"/>
            </button>
            <ul id="StoreSelectorMenu" class="dropdown-menu" aria-labelledby="StoreSelectorToggle">
                @foreach (var option in Model.Options)
                {
                    <li>
                        @if (option.IsOwner)
                        {
                            <a asp-controller="UIStores" asp-action="Dashboard" asp-route-storeId="@option.Value" class="dropdown-item@(option.Selected ? " active" : "")" id="StoreSelectorMenuItem-@option.Value">@StoreName(option.Text)</a>
                        }
                        else
                        {
                            <a asp-controller="UIInvoice" asp-action="ListInvoices" asp-route-storeId="@option.Value" class="dropdown-item@(option.Selected ? " active" : "")" id="StoreSelectorMenuItem-@option.Value">@StoreName(option.Text)</a>
                        }
                    </li>
                }
                <li><hr class="dropdown-divider"></li>
                <li><a asp-controller="UIUserStores" asp-action="CreateStore" class="dropdown-item" id="StoreSelectorCreate">Create Store</a></li>
            </ul>
        </div>
    }
    else if (SignInManager.IsSignedIn(User))
    {
        <a asp-controller="UIUserStores" asp-action="CreateStore" class="btn btn-primary w-100 rounded-pill" id="StoreSelectorCreate">Create Store</a>
    }
</div>

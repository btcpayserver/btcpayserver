using System;
using System.Collections.Generic;

namespace BTCPayServer.Services
{
    public partial class Translations
    {
        static Translations()
        {
            // Text generated by UpdateDefaultTranslations.
            // Please run it before release.
            var knownTranslations =
"""
Account key
Account key path
Add additional fee (network fee) to invoice …
Add Exchange Rate Spread
Add hop hints for private channels to the Lightning invoice
Admin API access token
Admin must approve new users
Allow anyone to create invoice
Allow form for public use
Allow payee to create invoices with custom amounts
Allow payee to pass a comment
Allow Stores use the Server's SMTP email settings as their default
Always include non-witness UTXO if available
Amazon S3
Amount
API Key
App
App Name
App Type
Application
Authenticator code
Auto-detect language on checkout
Automatically approve claims
Available Payment Methods
Azure Blob Storage
Backend's language
Batch size
BIP39 Seed (12/24 word mnemonic phrase) or HD private key (xprv...)
Brand Color
Buyer Email
Callback Notification URL
Can use hot wallet
Can use RPC import
Celebrate payment with confetti
Check releases on GitHub and notify when new BTCPay Server version is available
Colors to rotate between with animation when a payment is made. One color per line.
Confirm new password
Confirm password
Connection string
Consider the invoice paid even if the paid amount is … % less than expected
Consider the invoice settled when the payment transaction …
Contact URL
Contribution Perks Template
Count all invoices created on the store as part of the goal
Currency
Current password
Custom CSS
Custom HTML title to display on Checkout page
Custom sound file for successful payment
Custom Theme Extension Type
Custom Theme File
Default currency
Default language on checkout
Default payment method on checkout
Default role for users on a new store
Derivation scheme
Derivation scheme format
Description
Description template of the lightning invoice
Destination Address
Disable public user registration
Disable stores from using the server's email settings as backup
Discourage search engines from indexing this site
Display app on website root
Display contribution ranking
Display contribution value
Display item selection for keypad
Display Lightning payment amounts in Satoshis
Display the category list
Display the search bar
Display Title
Disqus Shortname
Do not allow additional contributions after target has been reached
Does not extend a BTCPay Server theme, fully custom
Domain
Domain name
Don't create UTXO change
Email
Email address
Email confirmation required
Email confirmed?
Enable background animations on new payments
Enable Disqus Comments
Enable experimental features
Enable LNURL
Enable Payjoin/P2EP
Enable public receipt page for settled invoices
Enable public user registration
Enable sounds on checkout page
Enable sounds on new payments
Enable tips
End date
Error
Expiration Date
Extends the BTCPay Server Dark theme
Extends the BTCPay Server Light theme
Featured Image URL
Fee rate (sat/vB)
Form configuration (JSON)
Gap limit
Google Cloud Storage
GRPC SSL Cipher suite (GRPC_SSL_CIPHER_SUITES)
Image
Invoice currency
Invoice expires if the full amount has not been paid after …
Invoice metadata
Is administrator?
Is signing key
Item Description
Keypad
Lightning node (LNURL Auth)
LNURL Classic Mode
Local File System
Logo
Make Crowdfund Public
Master fingerprint
Max sats
Memo
Metadata
Min sats
Minimum acceptable expiration time for BOLT11 for refunds
New password
Non-admins can access the User Creation API Endpoint
Non-admins can create Hot Wallets for their Store
Non-admins can import Hot Wallets for their Store
Non-admins can use the Internal Lightning Node for their Store
Non-admins cannot access the User Creation API Endpoint
Notification Email
Notification URL
Only enable the payment method after user explicitly chooses it
Optional seed passphrase
Order Id
Override the block explorers used
Pair to
Password
Password (leave blank to generate invite-link)
PayJoin BIP21
Payment invalid if transactions fails to confirm … after invoice expiration
Payout Methods
Plugin server
Point of Sale Style
Policies
Preferred Price Source
Print display
Product list
Product list with cart
Profile Picture
PSBT content
PSBT to combine with…
Public Key
Rate Rules
Recommended fee confirmation target blocks
Recovery Code
Redirect invoice to redirect url automatically after paid
Redirect URL
Remember me
Remember this machine
Request contributor data on checkout
Request customer data on checkout
Reset goal every
REST Uri
Role
Root fingerprint
Scope
Search engines can index this site
Security device (FIDO2)
Select the Default Currency during Store Creation
Select the payout method used for refund
Server Name
Shop Name
Show "Pay in wallet" button
Show a timer … minutes before invoice expiration
Show plugins in pre-release
Show recommended fee
Show the payment list in the public receipt page
Show the QR code of the receipt in the public receipt page
Show the store header
Sign in
Sort contribution perks by popularity
Sounds to play when a payment is made. One sound per line
Specify the amount and currency for the refund
Start date
Starting index
Store
Store Id
Store Name
Store Website
Subtract fees from amount
Support URL
Supported Transaction Currencies
Target Amount
Test Email
Text to display in the tip input
Text to display on buttons allowing the user to enter a custom amount
Text to display on each button for items with a specific price
Tip percentage amounts (comma separated)
Unify on-chain and lightning payment URL/QR code
Upload PSBT from file…
Url of the Dynamic DNS service you are using
Use custom theme
Use SSL
User can input custom amount
User can input discount in %
UTXOs to spend from
Verification Code
Wallet file
Wallet file content
Welcome to {0}
Your dynamic DNS hostname
""";
            Default = Translations.CreateFromText(knownTranslations);
            Default = new Translations(new KeyValuePair<string, string>[]
            {
                // You can add additional hard coded default here
                // KeyValuePair.Create("key1", "value")
                // KeyValuePair.Create("key2", "value")
            }, Default);
        }

        /// <summary>
        /// Translations which are already in the Default aren't saved into database.
        /// This allows us to automatically update the english version if the translations didn't changed.
        /// 
        /// We only save into database the key/values that differ from Default
        /// </summary>
        public static Translations Default;
        public readonly static string DefaultLanguage = "English";
    }
}

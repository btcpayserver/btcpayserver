@using BTCPayServer.Views.Stores
@using BTCPayServer.Abstractions.Extensions
@model LNURLController.EditLightningAddressVM
@{
    Layout = "../Shared/_NavLayout.cshtml";
    ViewData["NavPartialName"] = "../Stores/_Nav";
    ViewData.SetActivePageAndTitle(StoreNavPages.Integrations, "Lightning Address Setup", Context.GetStoreData().StoreName);
}
<h2 class="mb-4">@ViewData["PageTitle"]</h2>

<a data-bs-toggle="collapse" data-bs-target="#AddAddress" class="btn btn-primary mb-2" role="button">
    <span class="fa fa-plus"></span>
    Add Address
</a>
<style>
        .settings-holder span:not(:last-child):after{
            content: " / ";
        }
    </style>

<form asp-action="EditLightningAddress" method="post">
    
     @{
         
         var show = !ViewContext.ViewData.ModelState.IsValid || !string.IsNullOrEmpty(Model.Add?.Username) || Model.Add?.Max != null || Model.Add?.Min != null || !string.IsNullOrEmpty(Model.Add?.CurrencyCode);
     }
    
    <div class="row collapse @(show? "show": "")" id="AddAddress">
        <div class="form-group">
            <label asp-for="Add.Username" class="form-label"></label>
            <div class="input-group">
                <input asp-for="Add.Username" class="form-control"/>
                <span class="input-group-text" >@@@Context.Request.Host.ToUriComponent()@Context.Request.PathBase</span>
            </div>
            <span asp-validation-for="Add.Username" class="text-danger"></span>
        </div>
        <div class="form-group">
    
            <a class="mb-2" role="button" data-bs-toggle="collapse" data-bs-target="#AdvancedSettings"><span class="fa fa-cogs">&nbsp</span>Advanced settings</a>
        </div>
        <div class="collapse " id="AdvancedSettings">
    
            <div class="form-group">
                <label asp-for="Add.CurrencyCode" class="form-label">Invoice currency</label>
                <input asp-for="Add.CurrencyCode" class="form-control"/>
                <span asp-validation-for="Add.CurrencyCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <div class="input-group">
                    <span class="input-group-text">min/max (sats)</span>
                    <input type="number" min="1" asp-for="Add.Min" class="form-control">
                    <input type="number" min="1" asp-for="Add.Max" class="form-control">
                </div>
                <span asp-validation-for="Add.Min" class="text-danger"></span>
                <span asp-validation-for="Add.Max" class="text-danger"></span>
            </div>
        </div>
    
        <div class="form-group">
    
            <button type="submit" name="command" value="add" class="btn btn-primary btn-sm ms-2">Save</button>
        </div>
    </div>
    
    
    <table class="table table-hover">
        <thead>
        <tr>
            <th>
                Address
            </th>
            <th>Settings</th>
            <th class="text-end">Actions</th>
        </tr>
        </thead>
        <tbody>
        @for (var index = 0; index < Model.Items.Count; index++)
        {
            <input asp-for="Items[index].CurrencyCode" type="hidden"/>
            <input asp-for="Items[index].Min" type="hidden"/>
            <input asp-for="Items[index].Max" type="hidden"/>
            <input asp-for="Items[index].Username" type="hidden"/>
            var address = $"{Model.Items[index].Username}@{Context.Request.Host.ToUriComponent()}{Context.Request.PathBase}";
            <tr>
                <td>
                    <div class="input-group" data-clipboard="@address">
                        <input type="text" class="form-control copy-cursor lightning-address-value"  readonly="readonly" value="@address"/>
                        <button type="button" class="btn btn-outline-secondary" data-clipboard-confirm>Copy</button>
                    </div>

                </td>
                <td class="settings-holder">
                    @if (Model.Items[index].Min.HasValue)
                    {
                        <span>@Safe.Raw($"{Model.Items[index].Min} min sats")</span>
                    }
                    @if (Model.Items[index].Max.HasValue)
                    {
                        <span> @Safe.Raw($"{Model.Items[index].Max} max sats")</span>
                    }
                    @if (!string.IsNullOrEmpty(Model.Items[index].CurrencyCode))
                    {
                        <span> @Safe.Raw($"tracked in {Model.Items[index].CurrencyCode}")</span>
                    }
                </td>
                <td class="text-end">
                    <button type="submit" title="Remove" name="command" value="@($"remove:{index}")"
                            class="btn btn-link px-0">
                        Remove
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
</form>

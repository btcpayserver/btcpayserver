@using BTCPayServer.Services
@using BTCPayServer.Services.Mails;
@model BTCPayServer.Services.PoliciesSettings
@inject BTCPayServer.Services.SettingsRepository _SettingsRepository
@{
    ViewData.SetActivePageAndTitle(ServerNavPages.Policies);
}


<partial name="_StatusMessage"/>
@if (!this.ViewContext.ModelState.IsValid)
{
    <div asp-validation-summary="All" class="text-danger"></div>
}

<form method="post">
    <div class="form-group">
        <div class="form-check">
            @{
                var emailSettings = (await _SettingsRepository.GetSettingAsync<EmailSettings>()) ?? new EmailSettings();
                /**
                 * The "|| Model.RequiresConfirmedEmail" check is for the case when a user had checked
                 * the checkbox without first configuring the e-mail settings so that they can uncheck it.
                 **/
                var isEmailConfigured = emailSettings.IsComplete() || Model.RequiresConfirmedEmail;
            }
            <input asp-for="RequiresConfirmedEmail" type="checkbox" class="form-check-input" disabled="@(isEmailConfigured ? null : "disabled")" />
            <label asp-for="RequiresConfirmedEmail" class="form-check-label"></label>
            <span asp-validation-for="RequiresConfirmedEmail" class="text-danger"></span>
            @if (!isEmailConfigured) {
                <div>
                    <span class="text-secondary">Your email server has not been configured. <a asp-controller="Server" asp-action="Emails">Please configure it first.</a></span>
                </div>
            }
        </div>
        <div class="form-check">
            <input asp-for="LockSubscription" type="checkbox" class="form-check-input"/>
            <label asp-for="LockSubscription" class="form-check-label"></label>
            <span asp-validation-for="LockSubscription" class="text-danger"></span>
        </div>
        <div class="form-check">
            <input asp-for="DiscourageSearchEngines" type="checkbox" class="form-check-input"/>
            <label asp-for="DiscourageSearchEngines" class="form-check-label"></label>
            <span asp-validation-for="DiscourageSearchEngines" class="text-danger"></span>
        </div>
        <div class="form-check">
            <input asp-for="AllowLightningInternalNodeForAll" type="checkbox" class="form-check-input"/>
            <label asp-for="AllowLightningInternalNodeForAll" class="form-check-label"></label>
            <span asp-validation-for="AllowLightningInternalNodeForAll" class="text-danger"></span>
        </div>
        <div class="form-check">
            <input asp-for="AllowHotWalletForAll" type="checkbox" class="form-check-input"/>
            <label asp-for="AllowHotWalletForAll" class="form-check-label"></label>
            <span asp-validation-for="AllowHotWalletForAll" class="text-danger"></span>
        </div>
        <div class="form-check">
            <input asp-for="AllowHotWalletRPCImportForAll" type="checkbox" class="form-check-input"/>
            <label asp-for="AllowHotWalletRPCImportForAll" class="form-check-label"></label>
            <span asp-validation-for="AllowHotWalletRPCImportForAll" class="text-danger"></span>
        </div>
        <div class="form-check">
            <input asp-for="DisableInstantNotifications" type="checkbox" class="form-check-input"/>
            <label asp-for="DisableInstantNotifications" class="form-check-label"></label>
            <span asp-validation-for="DisableInstantNotifications" class="text-danger"></span>
        </div>
        @if (ViewBag.UpdateUrlPresent)
        {
            <div class="form-check">
                <input asp-for="CheckForNewVersions" type="checkbox" class="form-check-input"/>
                <label asp-for="CheckForNewVersions" class="form-check-label"></label>
                <span asp-validation-for="CheckForNewVersions" class="text-danger"></span>
            </div>
        }
    </div>
    <div class="form-group">
        <label asp-for="RootAppId"></label>
        <select asp-for="RootAppId" asp-items="@(new SelectList(ViewBag.AppsList, nameof(SelectListItem.Value), nameof(SelectListItem.Text), Model.RootAppId))" class="form-control"></select>
        @if (!Model.DomainToAppMapping.Any())
        {
            <button type="submit" name="command" value="add-domain" class="btn btn-link"> Map specific domains to specific apps</button>
        }
    </div>

    @if (Model.DomainToAppMapping.Any())
    {
        <div class="list-group mb-2">
            <div class="list-group-item">
                <h5 class="mb-1">
                    Domain to app mapping
                    <button type="submit" name="command" value="add-domain" class="ml-1 btn btn-secondary btn-sm ">Add domain mapping </button>
                </h5>
            </div>
            @for (var index = 0; index < Model.DomainToAppMapping.Count; index++)
            {
                <div class="list-group-item p-0 pl-lg-2">
                    <div class="row">
                        <div class="col-sm-12 col-md-12 col-lg-10  py-2 ">
                            <div class="form-group">
                                <label asp-for="DomainToAppMapping[index].Domain" class="control-label"></label>
                                <input asp-for="DomainToAppMapping[index].Domain" class="form-control"/>
                                <span asp-validation-for="DomainToAppMapping[index].Domain" class="text-danger"></span>
                            </div>
                            <div class="form-group">
                                <label asp-for="DomainToAppMapping[index].AppId"></label>
                                <select asp-for="DomainToAppMapping[index].AppId"
                                        asp-items="@(new SelectList(ViewBag.AppsList, nameof(SelectListItem.Value), nameof(SelectListItem.Text), Model.DomainToAppMapping[index].AppId))"
                                        class="form-control">
                                </select>

                                <span asp-validation-for="DomainToAppMapping[index].AppId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-sm-12 col-md-12 col-lg-2 pull-right">
                            <button type="submit" title="Remove domain mapping" name="command" value="@($"remove-domain:{index}")"
                                    class="d-block d-lg-none d-xl-none btn btn-danger mb-2 ml-2">
                                Remove Destination
                            </button>
                            <button type="submit" title="Remove domain mapping" name="command" value="@($"remove-domain:{index}")"
                                    class="d-none d-lg-block remove-domain-btn text-decoration-none h-100 align-middle btn text-danger btn-link fa fa-times rounded-0 pull-right">
                            </button>
                        </div>
                    </div>
                </div>
            }

        </div>
    }
    <div class="form-group card">
        <div class="cursor-pointer p-2" data-target="#explorer-links" data-toggle="collapse">
            <label asp-for="BlockExplorerLinks" class="pb-0 cursor-pointer"></label>
            <span class="fa fa-chevron-down float-right pt-1"></span>
        </div>
        <ul class="list-group list-group-flush collapse show collapse-on-js" id="explorer-links">
            @inject BTCPayNetworkProvider BTCPayNetworkProvider
            @{
                var networks = BTCPayNetworkProvider.GetAll().ToArray();
            }

            @for (int i = 0; i < networks.Count(); i++)
            {
                var network = networks.ElementAt(i);
                var existingOverride = Model.BlockExplorerLinks?.SingleOrDefault(tuple => tuple.CryptoCode.Equals(network.CryptoCode, StringComparison.InvariantCultureIgnoreCase));
                var linkValue = existingOverride?.Link ?? network.BlockExplorerLinkDefault;
                if (Model.BlockExplorerLinks.Count < i + 1)
                {
                    Model.BlockExplorerLinks.Add(new PoliciesSettings.BlockExplorerOverrideItem() {CryptoCode = network.CryptoCode, Link = network.BlockExplorerLinkDefault});
                }
                <li class="list-group-item">
                    <label > @network.DisplayName (@network.CryptoCode)</label>
                    <input type="hidden" asp-for="BlockExplorerLinks[i].CryptoCode" value="@network.CryptoCode"/>
                    <div class="input-group">
                        <input type="text" class="form-control" asp-for="BlockExplorerLinks[i].Link" value="@linkValue" data-default-link="@network.BlockExplorerLinkDefault"/>
                        <div class="input-group-btn only-for-js">
                            <button type="button" class="text-decoration-none btn btn-link revert-default fa fa-refresh " title="Revert to default"></button>
                        </div>
                    </div>

                </li>
            }
        </ul>
    </div>
    <button type="submit" class="btn btn-primary" name="command" value="Save">Save</button>
</form>

@section Scripts {
    <style>
            .remove-domain-btn{
                font-size: 1.5rem;
                border-radius: 0;
            }
             .remove-domain-btn:hover{
                       background-color: #CCCCCC;
             }
    </style>
    <script >
        for (let element of document.getElementsByClassName("revert-default")) {
            element.addEventListener("click", function (){
              element.parentElement.previousElementSibling.value = element.parentElement.previousElementSibling.getAttribute("data-default-link")
            });
        }
        for (let element of document.getElementsByClassName("collapse-on-js")){
            if (element.classList.contains("show")){
                element.classList.remove("show");
            }    
        }
    </script>
}

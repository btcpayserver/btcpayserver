@using BTCPayServer.BIP78.Sender
@using NBitcoin
@model BTCPayServer.Models.InvoicingModels.PaymentModel
@inject BTCPayNetworkProvider BTCPayNetworkProvider

<script type="text/x-template" id="bitcoin-method-checkout-template">
    <div>
        <div class="bp-views">
            @if (BTCPayNetworkProvider.NetworkType == ChainName.Regtest)
            {
                <div class="bp-view payment scan" id="scan" v-bind:class="{ 'active': currentTab == 'fake'}">
                    <form id="fake-payment" action="/i/@Model.InvoiceId/fake-payment" method="post" class="form-inline">
                        <div class="form-group">
                            <label for="fake-payment-crypto-code" class="control-label">{{$t("Fake a @Model.CryptoCode payment for testing")}}</label>
                            <p class="alert alert-danger" style="display: none;"></p>
                            <p class="alert alert-success" style="display: none;"></p>
                            <div class="input-group">
                              <input id="fake-payment-amount" name="amount" type="number" step="any" class="form-control" placeholder="Amount" value="@Model.BtcDue" aria-label="Amount" aria-describedby="fake-payment-crypto-code">
                              <div class="input-group-addon" id="fake-payment-crypto-code">@Model.CryptoCode</div>
                            </div>
                        </div>
                        <button class="btn btn-primary" type="submit">{{$t("Fake Payment")}}</button>
                        <p class="text-muted">{{$t("This is the same as running bitcoin-cli.sh sendtoaddress xxx")}}</p>
                    </form>
                    <form id="expire-invoice" action="/i/@Model.InvoiceId/expire" method="post">
                        <button class="btn btn-secondary" type="submit">{{$t("Expire Invoice Now")}} (TODO)</button>
                    </form>
                    <form id="expire-invoice" action="/i/@Model.InvoiceId/expire-monitoring" method="post">
                        <!-- TODO only show when expired -->
                        <button class="btn btn-secondary" type="submit">{{$t("Expire Monitoring Now")}} (TODO)</button>
                    </form>
                    <form id="mine-block" action="/i/@Model.InvoiceId/mine-block" method="post">
                        <!-- TODO only show when BTC On-chain -->
                        <!-- TODO to make it work use Bitcoin RPC calls getnewaddress + generatetoaddress -->
                        <button class="btn btn-secondary" type="submit">{{$t("Mine a block now")}} (TODO)</button>
                    </form>
                </div>
            }
            <div class="bp-view payment scan" id="scan" v-bind:class="{ 'active': currentTab == 'scan'}">
                <div class="payment__scan">
                    <img v-bind:src="srvModel.cryptoImage" class="qr_currency_icon" v-if="scanDisplayQr"/>
                    <qrcode v-bind:value="scanDisplayQr" :options="{ width: 256, margin: 1, color: {dark:'#000', light:'#f5f5f7'} }" tag="svg" v-if="scanDisplayQr"></qrcode>
                    <div class="payment__spinner qr_currency_icon" style="padding-right: 20px;">
                        <partial name="Checkout-Spinner"/>
                    </div>
                </div>
                <div class="payment__details__instruction__open-wallet" v-if="srvModel.invoiceBitcoinUrl">
                    <a class="payment__details__instruction__open-wallet__btn action-button" target="_top" v-bind:href="srvModel.invoiceBitcoinUrl">
                        <span>{{$t("Open in wallet")}}</span>
                    </a>
                </div>
            </div>
            <div class="bp-view payment manual-flow" id="copy" v-bind:class="{ 'active': currentTab == 'copy'}">
                <div class="manual__step-two__instructions">
                    <span v-html="$t('CompletePay_Body', srvModel)"></span>
                </div>
                <div class="copyLabelPopup">
                    <span>{{$t("Copied")}}</span>
                </div>
                <nav class="copyBox">
                    <div class="copySectionBox bottomBorder">
                        <label>{{$t("Amount")}}</label>
                        <div class="copyAmountText copy-cursor _copySpan">
                            <span>{{srvModel.btcDue}}</span> {{ srvModel.cryptoCode }}
                        </div>
                    </div>
                    <div class="separatorGem"></div>
                    <div class="copySectionBox bottomBorder">
                        <label>{{$t("Address")}}</label>
                        <div class="inputWithIcon _copyInput">
                            <input type="text" class="checkoutTextbox" v-bind:value="srvModel.btcAddress" readonly="readonly"/>
                            <img v-bind:src="srvModel.cryptoImage"/>
                        </div>
                    </div>
                    <div class="separatorGem" v-if="srvModel.invoiceBitcoinUrl"></div>
                    <div class="copySectionBox" v-if="srvModel.invoiceBitcoinUrl" :title="$t(hasPayjoin? 'BIP21 payment link' : 'BIP21 payment link with payjoin support') " >
                        <label>{{$t("Payment link")}}</label>
                        <div class="inputWithIcon _copyInput">
                            <input type="text" class="checkoutTextbox" v-bind:value="srvModel.invoiceBitcoinUrl" readonly="readonly"/>
                            <img v-bind:src="srvModel.cryptoImage" v-if="hasPayjoin"/>
                            <i class="fa fa-user-secret" v-else/>
                        </div>
                    </div>
                </nav>
            </div>
            @await Component.InvokeAsync("UiExtensionPoint" ,  new { location="checkout-bitcoin-post-content"})
        </div>
        @if (Model.ShowRecommendedFee) {
            <div id="recommended-fee" class="recommended-fee" v-bind:class="{ hide: !srvModel.feeRate }">
                <span v-html="$t('Recommended_Fee', srvModel)"></span>
            </div>
        }
    </div>          
</script>

<script type="text/x-template" id="bitcoin-method-checkout-header-template">
    <div class="payment-tabs">
        @if (BTCPayNetworkProvider.NetworkType == ChainName.Regtest)
        {
            // TODO the Fake Payment is now in a tab, but the tabs disappear after payment. We want the fake payment form to remain visible so we can simulate more payments, over payments and payments after expiry.
            <div class="payment-tabs__tab " id="scan-tab" v-on:click="switchTab('fake')"  v-bind:class="{ 'active': currentTab == 'fake'}" >
                <span>{{$t("Fake Payment")}}</span>
            </div>
        }
        <div class="payment-tabs__tab " id="scan-tab" v-on:click="switchTab('scan')"  v-bind:class="{ 'active': currentTab == 'scan'}" >
            <span>{{$t("Scan")}}</span>
        </div>
        <div class="payment-tabs__tab" id="copy-tab" v-on:click="switchTab('copy')"  v-bind:class="{ 'active': currentTab == 'copy'}" >
            <span>{{$t("Copy")}}</span>
        </div>
        @await Component.InvokeAsync("UiExtensionPoint" ,  new { location="checkout-bitcoin-post-tabs"})
    </div>
</script>

<script type="text/javascript">
    Vue.component('BitcoinLikeMethodCheckout',
        {
            props: ["srvModel"],
            template: "#bitcoin-method-checkout-template",
            components: {
                qrcode: VueQrcode
            },
            data: function() {
                return {
                    // TODO detect the first tab using JS and not hard-code this
                    currentTab: "scan"
                }
            },
            computed: {
                hasPayjoin: function(){
                    return this.srvModel.invoiceBitcoinUrl.indexOf('@PayjoinClient.BIP21EndpointKey=') === -1;
                },
                scanDisplayQr: function() {
                    return this.srvModel.invoiceBitcoinUrlQR;
                }
            },
            mounted: function() {
                initFakePaymentForm();
                var self = this;
                eventBus.$on("tab-switched",
                    function(tab) {
                        self.currentTab = tab;
            });
        }
    });

    Vue.component('BitcoinLikeMethodCheckoutHeader', {
        props: ["srvModel"],
        template: "#bitcoin-method-checkout-header-template",
        data: function() {
            return {
                // TODO detect the first tab using JS and not hard-code this
                currentTab: "scan"
            };
        },
        methods: {
            switchTab: function(tab) {
                this.currentTab = tab;
                eventBus.$emit("tab-switched", tab);
            }
        }
    });
   
    function initFakePaymentForm(){
        let payForm = $('form#fake-payment');
        let loader = $('form#fake-payment-loading');
        
        let inputField = $('#fake-payment-amount');
        let submitButton = payForm.find('button[type=submit]');
        let paySuccess = payForm.find('p.alert-success');
        let payAlert = payForm.find('p.alert-danger');
        
        payForm.submit(function (e){
             e.preventDefault();
             
             let form = $(this);
             let data = form.serialize();
                          
             paySuccess.hide();
             payAlert.hide();
             loader.show();
             inputField.prop('disabled', true);
             submitButton.prop('disabled', true);
             
             $.post({
                 url: form.attr('action'),
                 data: data,
                 success: function (data,status,xhr){
                     paySuccess.html(data.successMessage);
                     paySuccess.show();
                     inputField.val(data.amountRemaining);
                     if (data.amountRemaining <= 0){
                         // No need to fake any more payments.
                         form.hide();                             
                     }
                 },
                 complete: function (xhr,status){
                     loader.hide();
                     inputField.prop('disabled', false);
                     submitButton.prop('disabled', false);
                 },
                 error: function (xhr,status,error){
                     var data = JSON.parse(xhr.responseText);
                     payAlert.html(data.errorMessage);
                     payAlert.show();
                 }
             });
         });
        
        
        // Expire invoice form
        let expireForm = $('form#expire-invoice');
        let expireButton = expireForm.find('[type=submit]');
        let expireSuccess = expireForm.find('p.alert-success');
        let expireAlert = expireForm.find('p.alert-danger');
        
        expireForm.submit(function (e){
                e.preventDefault();
                expireSuccess.hide();
                expireAlert.hide();
                             
                $.post({
                    url: form.attr('action'),
                    data: data,
                    success: function (data,status,xhr){
                        expireSuccess.html(data.successMessage);
                        expireSuccess.show();
                        expireButton.hide();
                     },
                     complete: function (xhr,status){
                         loader.hide();
                         submitButton.prop('disabled', false);
                     },
                     error: function (xhr,status,error){
                         var data = JSON.parse(xhr.responseText);
                         expireAlert.html(data.errorMessage);
                         expireAlert.show();
                     }
                });
        });
    }

    $(document).ready(function() {
        // Clipboard Copy
        var copySpan = new Clipboard('._copySpan', {
                target: function(trigger) {
                    return copyElement(trigger, 0, 65).firstChild;
                }
        });
        var copyInput = new Clipboard('._copyInput', {
                target: function(trigger) {
                    return copyElement(trigger, 4, 65).firstChild;
                }
        });

        function copyElement(trigger, popupLeftModifier, popupTopModifier) {
            var elm = $(trigger);
            var position = elm.offset();
            position.top -= popupLeftModifier + $(window).scrollTop();
            position.left += (elm.width() / 2) - popupTopModifier;
            $(".copyLabelPopup").css(position).addClass("copied");
            elm.removeClass("copy-cursor").addClass("clipboardCopied");
            setTimeout(clearSelection, 100);
            setTimeout(function() {
                    elm.removeClass("clipboardCopied").addClass("copy-cursor");
                    $(".copyLabelPopup").removeClass("copied");
                },
                1000);
            return trigger;
        }

        function clearSelection() {
            if (window.getSelection) {
                window.getSelection().removeAllRanges();
            } else if (document.selection) {
                document.selection.empty();
            }
        }
        // Disable enter key
        $(document).keypress(
            function(event) {
                if (event.which === '13') {
                    event.preventDefault();
                }
            }
        );
    });
</script>

@model BTCPayServer.Abstractions.Form.Field
@{
    var isInvalid = ViewContext.ModelState[Model.Name]?.ValidationState is Microsoft.AspNetCore.Mvc.ModelBinding.ModelValidationState.Invalid;
    var errors = isInvalid ? ViewContext.ModelState[Model.Name].Errors : null;
}
@if (Model.Type == "hidden")
{
    <input id="@Model.Name" type="@Model.Type" name="@Model.Name" value="@Model.Value" />
    return;
}
<div class="form-group">
    <label class="form-label" for="@Model.Name"@(Model.Required ? " data-required" : "")>
        @Safe.Raw(Model.Label)
    </label>
    <div class="input-group">
        <input id="@Model.Name" type="@Model.Type" class="form-control @(errors is null ? "" : "is-invalid") @(Model.Type == "datetime-local" ? "flatdtpicker" : "")"
                                   data-fdtp='{ "enableTime": false, "dateFormat": "Z","altInput": true, "altFormat": "Y-m-d H:i:S" }'
               name="@Model.Name" value="@Model.Value" data-val="true" readonly="@Model.Constant"
               @if (!string.IsNullOrEmpty(Model.HelpText))
               {
                   @Safe.Raw($" aria-describedby=\"HelpText-{Model.Name}\"")
               }
               @if (Model.Required)
               {
                   @Safe.Raw($" data-val-required=\"{Model.Label} is required.\" required")
               } />
        @if (Model.Type == "datetime-local")
        {
            <button class="btn btn-secondary input-group-clear" type="button" title="Clear">
                <span class="fa fa-times"></span>
            </button>
        }
    </div>


    <span class="text-danger" data-valmsg-for="@Model.Name" data-valmsg-replace="true">@(isInvalid && errors.Any() ? errors.First().ErrorMessage : string.Empty)</span>
    @if (!string.IsNullOrEmpty(Model.HelpText))
    {
        <div id="@($"HelpText-{Model.Name}")" class="form-text">
            @Safe.Raw(Model.HelpText)
        </div>
    }
</div>

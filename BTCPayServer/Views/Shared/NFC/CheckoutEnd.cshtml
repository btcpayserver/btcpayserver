@using BTCPayServer.Abstractions.Extensions
@using BTCPayServer.Abstractions.TagHelpers
<template id="lnurl-withdraw-template">
    <template v-if="display">
        <div class="mt-4">
            <p id="CheatSuccessMessage" class="alert alert-success text-break" v-if="successMessage" v-text="successMessage"></p>
            <p id="CheatErrorMessage" class="alert alert-danger text-break" v-if="errorMessage" v-text="errorMessage"></p>
            <button v-if="isV2" class="btn btn-secondary rounded-pill w-100" type="button"
                :disabled="scanning || submitting" v-on:click="startScan" :id="btnId"
                :class="{ 'loading': scanning || submitting, 'text-secondary': !supported }">{{btnText}}</button>
            <bp-loading-button v-else>
                <button class="action-button" style="margin: 0 45px;width:calc(100% - 90px) !important"
                        :disabled="scanning || submitting" v-on:click="startScan" :id="btnId"
                        :class="{ 'loading': scanning || submitting, 'action-button': supported, 'btn btn-text w-100': !supported  }">
                    <span class="button-text">{{btnText}}</span>
                    <div class="loader-wrapper">
                        @await Html.PartialAsync("~/Views/UIInvoice/Checkout-Spinner.cshtml")
                    </div>
                </button>
            </bp-loading-button>
        </div>
    </template>
</template>
<script type="text/javascript">
Vue.component("lnurl-withdraw-checkout", {
    template: "#lnurl-withdraw-template",
    props: {
        model: Object,
        isV2: Boolean
    },
    computed: {
        display: function () {
            const {
                onChainWithLnInvoiceFallback: isUnified,
                paymentMethodId: activePaymentMethodId,
                availableCryptos: availablePaymentMethods,
                invoiceBitcoinUrl: paymentUrl
            } = this.model
            const lnurlwAvailable = 
                // Either we have LN or LNURL available directly
                !!availablePaymentMethods.find(pm => ['BTC_LNURLPAY', 'BTC_LightningLike'].includes(pm.paymentMethodId)) ||
                // Or the BIP21 payment URL flags Lightning support
                !!paymentUrl.match(/lightning=ln/i)
            return activePaymentMethodId === 'BTC_LNURLPAY' || (
                // Unified QR/BIP21 case
                (activePaymentMethodId === 'BTC' && isUnified && lnurlwAvailable) ||
                // Lightning with LNURL available
                (activePaymentMethodId === 'BTC_LightningLike' && lnurlwAvailable))
        },
        btnId: function () {
            return this.supported ? 'PayByNFC' : 'PayByLNURL'
        },
        btnText: function () {
            if (this.supported) {
                return this.isV2 ? this.$t('pay_by_nfc') : 'Pay by NFC (LNURL-Withdraw)'
            } else {
                return this.isV2 ? this.$t('pay_by_lnurl') : 'Pay by LNURL-Withdraw'
            }
        }
    },
    data: function () {
        return {
            url: @Safe.Json(Context.Request.GetAbsoluteUri(Url.Action("SubmitLNURLWithdrawForInvoice", "NFC"))),
            supported: ('NDEFReader' in window && window.self === window.top),
            scanning: false,
            submitting: false,
            readerAbortController: null,
            amount: 0,
            successMessage: null,
            errorMessage: null
        }
    },
    methods: {
        startScan: async function () {
            try {
                if (this.scanning || this.submitting) {
                    return;
                }
                if (this.model.isUnsetTopUp) {
                    const amountStr = prompt("How many sats do you want to pay?")
                    if (amountStr) {
                        try {
                            this.amount = parseInt(amountStr)
                        } catch {
                            alert("Please provide a valid number amount in sats");
                        }
                    } else {
                        return;    
                    }
                }
                
                const self = this;
                self.submitting = false;
                self.scanning = true;
                if (!this.supported) {
                    const result = prompt("Enter LNURL-Withdraw");
                    if (result) {
                        await self.sendData.bind(self)(result);
                        return;
                    }
                    self.scanning = false;
                }
                ndef = new NDEFReader()
                self.readerAbortController = new AbortController()
                await ndef.scan({signal: self.readerAbortController.signal})

                ndef.addEventListener('readingerror', () => {
                    self.scanning = false;
                    self.readerAbortController.abort()
                })

                ndef.addEventListener('reading', async ({message, serialNumber}) => {
                    //Decode NDEF data from tag
                    const record = message.records[0]
                    const textDecoder = new TextDecoder('utf-8')
                    const lnurl = textDecoder.decode(record.data)

                    //User feedback, show loader icon
                    self.scanning = false;
                    await self.sendData.bind(self)(lnurl);
                })
            } catch (e) {
                self.scanning = false;
                self.submitting = false;
            }
        },
        sendData: async function (lnurl) {
            this.submitting = true;
            this.successMessage = null;
            this.errorMessage = null;
            
            // Post LNURL-Withdraw data to server
            const body = JSON.stringify({ lnurl, invoiceId: this.model.invoiceId, amount: this.amount })
            const opts = { method: 'POST', headers: { 'Content-Type': 'application/json' }, body }
            const response = await fetch(this.url, opts)
            
            // Handle response
            try {
                const result = await response.text()
                if (response.ok) {
                    this.successMessage = result;
                } else {
                    this.errorMessage = result;
                }
            } catch (error) {
                this.errorMessage = error;
            }
            this.scanning = false;
            this.submitting = false;
            if (this.readerAbortController) {
                this.readerAbortController.abort()
            }
        }
    }
});
</script>

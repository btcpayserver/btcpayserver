@using NBitcoin
@model GenerateWalletViewModel
@addTagHelper *, BundlerMinifier.TagHelpers
@{
    Layout = "_LayoutWalletSetup";
    ViewData["Title"] = $"Generate {Model.CryptoCode} Wallet";
}

@section Navbar {
    <a asp-controller="Stores" asp-action="ImportWalletOptions" asp-route-storeId="@Model.StoreId" asp-route-cryptoCode="@Model.CryptoCode" asp-route-method="">
        <vc:icon symbol="back" />
    </a>
}

<header class="text-center">
    <h1>@ViewData["Title"]</h1>
    <p class="lead text-secondary mt-3">Configure your wallet settings</p>
</header>

@if (Model.CanUseHotWallet)
{
    ViewData.Add(nameof(Model.CanUseRPCImport), Model.CanUseRPCImport);

    <form method="post" id="generate-form" enctype="multipart/form-data">
        @if (!User.IsInRole(Roles.ServerAdmin))
        {
            <div class="alert alert-warning">
                You are not an admin on this server. While you are able to import or generate a wallet via seed with your account, please understand that you are trusting the server admins not just with your <a href="https://docs.btcpayserver.org/ThirdPartyHosting/#privacy-concerns" target="_blank" class="alert-link">privacy</a> but also with <a href="https://docs.btcpayserver.org/ThirdPartyHosting/#trust-concerns" target="_blank"  class="alert-link">trivial access to your funds.</a> If you NEED to use this feature, please reconsider hosting your own BTCPay Server instance.
            </div>
        }
        <p>You may generate a wallet with a seed and import the xpub into BTCPay. You can optionally also tell NBX to import the keys to the node wallet to be able to view & spend received funds from it.</p>

        <div class="form-group">
            <label asp-for="Request.ExistingMnemonic">Existing Seed</label>
            <input type="text" asp-for="Request.ExistingMnemonic" class="form-control" autocomplete="off"/>
            <span asp-validation-for="Request.ExistingMnemonic" class="text-danger"></span>
            <small class="form-text text-muted">
                You can choose to import an existing mnemonic seed phrase.<br/>
                If you leave it blank, we will generate one for you.
            </small>
        </div>
        <div class="form-group">
            <label asp-for="Request.Passphrase">Passphrase (optional)</label>
            <input type="text" asp-for="Request.Passphrase" class="form-control" autocomplete="off"/>
            <span asp-validation-for="Request.Passphrase" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label for="passphrase_conf">Passphrase confirmation</label>
            <input type="text" name="passphrase_conf" id="passphrase_conf" class="form-control"/>
            <span class="text-danger field-validation-valid" id="passphrase_conf_validation"></span>
        </div>
        <div class="form-group">
            <label asp-for="Request.ScriptPubKeyType">Address type</label>
            <select class="form-control" asp-for="Request.ScriptPubKeyType">
                <option value="@ScriptPubKeyType.Segwit">Segwit (Recommended, cheapest transaction fee)</option>
                <option value="@ScriptPubKeyType.SegwitP2SH">Segwit wrapped (less cheap but compatible with old wallets)</option>
                <option value="@ScriptPubKeyType.Legacy">Legacy (Not recommended)</option>
            </select>
            <span asp-validation-for="Request.ScriptPubKeyType" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Request.AccountNumber">Account</label>
            <select asp-for="Request.AccountNumber" class="form-control">
                @for (int i = 0; i < 20; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
            <span asp-validation-for="Request.AccountNumber" class="text-danger"></span>
        </div>

        <div class="form-group form-check">
            <input type="checkbox" class="form-check-input" asp-for="Request.SavePrivateKeys"/>
            <label asp-for="Request.SavePrivateKeys" class="form-check-label">Is hot wallet</label>
            <span asp-validation-for="Request.SavePrivateKeys" class="text-danger"></span>
            <small class="form-text text-danger">
                If checked, each private key associated with an address generated will be stored as metadata in NBXplorer. While convenient, this means that anyone with access to your server will have access to your private keys and will be able to steal your funds.
            </small>
        </div>
        @if (ViewData["CanUseRPCImport"] is true)
        {
            <div class="form-group form-check">
                <input type="checkbox" class="form-check-input" asp-for="Request.ImportKeysToRPC"/>
                <label asp-for="Request.ImportKeysToRPC" class="form-check-label">Import keys to RPC</label>
                <span asp-validation-for="Request.ImportKeysToRPC" class="text-danger"></span>
                <small class="form-text text-muted">
                    If checked, each address generated will be imported into the node wallet so that you can view your balance through your node. When this is enabled alongside <code>Is hot wallet</code>, you're also able to use the node wallet to spend (this works pretty well in conjunction with apps such as FullyNoded).
                </small>
            </div>
        }
        <button type="submit" class="btn btn-primary" id="btn-generate">Generate</button>
    </form>
}
else
{
    <p class="mb-0">Please note that creating a wallet is not supported by your instance.</p>
}

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script type="text/javascript">
        window.addEventListener("load", async () => {
            document.getElementById("generate-form").addEventListener("submit", event => {
                event.preventDefault();
                const $form = event.currentTarget;

                if ($form.elements["passphrase_conf"].value !== $form.elements["Passphrase"].value) {
                    const $validation = document.getElementById("passphrase_conf_validation");
                    $validation.classList.remove("field-validation-valid");
                    $validation.innerText = "Invalid passphrase confirmation";
                    return false;
                }

                return true;
            });
        });
    </script>
}

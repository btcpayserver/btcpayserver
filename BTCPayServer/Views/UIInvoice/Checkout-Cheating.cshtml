@model PaymentModel

<main id="checkout-cheating" class="shadow-lg mt-5" v-cloak>
    <section>
        <p class="alert alert-success text-break" v-if="successMessage">{{ successMessage }}</p>
        <p class="alert alert-danger text-break" v-if="errorMessage">{{ errorMessage }}</p>
        <form id="test-payment" :action="`/i/${invoiceId}/test-payment`" method="post" v-on:submit.prevent="handleFormSubmit($event, 'paying')" v-if="!isPaid">
            <input name="CryptoCode" type="hidden" value="@Model.CryptoCode">
            <input name="PaymentMethodId" type="hidden" :value="paymentMethodId">
            <label for="test-payment-amount" class="control-label form-label">Fake a @Model.CryptoCode payment for testing</label>
            <div class="d-flex gap-2 mb-2">
                <div class="input-group">
                    <input id="test-payment-amount" name="Amount" type="number" step="0.00000001" min="0" class="form-control" placeholder="Amount" v-model="amountRemaining" :disabled="paying"/>
                    <div id="test-payment-crypto-code" class="input-group-addon input-group-text">@Model.CryptoCode</div>
                </div>
                <button id="FakePayment" class="btn btn-secondary flex-shrink-0 px-3 w-100px" type="submit" :disabled="paying">Pay</button>
            </div>
            <small class="text-muted">Equals running bitcoin-cli.sh sendtoaddress</small>
        </form>
        <form id="mine-block" :action="`/i/${invoiceId}/mine-blocks`" method="post" class="mt-5" v-on:submit.prevent="handleFormSubmit($event, 'mining')" v-if="paymentMethodId === 'BTC'">
            <label for="block-count" class="control-label form-label">Mine to test processing and settlement</label>
            <div class="d-flex gap-2">
                <div class="input-group">
                    <input id="block-count" name="BlockCount" type="number" step="1" min="1" class="form-control" value="1"/>
                    <div class="input-group-addon input-group-text">blocks</div>
                </div>
                <button class="btn btn-secondary flex-shrink-0 px-3 w-100px" type="submit" :disabled="mining">Mine</button>
            </div>
        </form>
        <form id="expire-invoice" :action="`/i/${invoiceId}/expire`" method="post" class="mt-5" v-on:submit.prevent="handleFormSubmit($event, 'expiring')" v-if="!isPaid">
            <label for="expiry-seconds" class="control-label form-label">Expire invoice in â€¦</label>
            <div class="d-flex gap-2">
                <div class="input-group">
                    <input id="expiry-seconds" name="Seconds" type="number" step="1" min="0" class="form-control" value="20" />
                    <div class="input-group-addon input-group-text">seconds</div>
                </div>
                <button class="btn btn-secondary flex-shrink-0 px-3 w-100px" type="submit" :disabled="expiring">Expire</button>
            </div>
        </form>
    </section>
</main>

<script>
    Vue.component('checkout-cheating', {
        el: '#checkout-cheating',
        data () {
            return {
                successMessage: null,
                errorMessage: null,
                paying: false,
                mining: false,
                expiring: false,
                amountRemaining: parseFloat(this.btcDue)
            }
        },
        props: {
            invoiceId: String,
            paymentMethodId: String,
            btcDue: Number,
            isPaid: Boolean
        },
        methods: {
            async handleFormSubmit (e, processing) {
                const form = e.target;
                const url = form.getAttribute('action');
                const method = form.getAttribute('method');
                const body = new FormData(form);
                const headers = { 'Accept': 'application/json' }
                
                this[processing] = true;
                const response = await fetch(url, { method, body, headers });
                const data = await response.json();
                this.successMessage = data.successMessage;
                this.errorMessage = data.errorMessage;
                if (data.amountRemaining) this.amountRemaining = data.amountRemaining;
                this[processing] = false;
            }
        }
    })
</script>

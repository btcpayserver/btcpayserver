@model PaymentModel

<div id="testing">
    <p class="alert alert-danger text-break" hidden></p>
    <p class="alert alert-success text-break" hidden></p>
    <form id="test-payment" action="/i/@Model.InvoiceId/test-payment" method="post" class="cheat-mode my-5">
        <input name="CryptoCode" type="hidden" value="@Model.CryptoCode">
        <label for="test-payment-amount" class="control-label form-label">{{$t("Fake a @Model.CryptoCode payment for testing")}}</label>
         <div class="d-flex gap-3 mb-2">
            <div class="input-group">
                <input id="test-payment-amount" name="Amount" type="number" step="0.00000001" min="0" class="form-control" placeholder="Amount" value="@Model.BtcDue" />
                <div id="test-payment-crypto-code" class="input-group-addon input-group-text">@Model.CryptoCode</div>
            </div>
            <button id="FakePayment" class="btn btn-primary flex-shrink-0" type="submit">{{$t("Fake Payment")}}</button>
        </div>
        <small class="text-muted">{{$t("This is the same as running bitcoin-cli.sh sendtoaddress xxx")}}</small>
    </form>
    @* TODO
    <form id="expire-monitoring" action="/i/@Model.InvoiceId/expire-monitoring" method="post" class="mb-1">
        <!-- TODO only show when expired -->
        <button class="btn btn-secondary" type="submit">{{$t("Expire Monitoring Now")}} (TODO)</button>
    </form>
    *@
     <form id="mine-block" action="/i/@Model.InvoiceId/mine-blocks" method="post" class="cheat-mode my-5">
         <!-- TODO only show when BTC On-chain -->
         <label for="block-count" class="control-label form-label">{{$t("Mine a few blocks to test processing and settlement.")}}</label>
         <div class="d-flex gap-3">
              <div class="input-group">
                  <input id="block-count" name="BlockCount" type="number" step="1" min="1" class="form-control" value="1" />
                  <div class="input-group-addon input-group-text">{{$t("Blocks")}}</div>
              </div>
              <button class="btn btn-secondary" type="submit">{{$t("Mine")}}</button>
         </div>
     </form>
    <form id="expire-invoice" action="/i/@Model.InvoiceId/expire" method="post" class="cheat-mode my-5">
        <button class="btn btn-secondary" type="submit">{{$t("Expire Invoice Now")}}</button>
    </form>
</div>

<script type="text/javascript">
    document.addEventListener('DOMContentLoaded', () => {
        const expireForm = document.querySelector('form#expire-invoice');
        const successAlert = document.querySelector('#testing p.alert-success');
        const errorAlert = document.querySelector('#testing p.alert-danger');
        
        delegate('submit', 'form.cheat-mode', async e => {
             e.preventDefault();
             
             const form = e.target;
             const url = form.getAttribute('action');
             const method = form.getAttribute('method');
             const body = new FormData(form);
             const headers = { 'Accept': 'application/json' }
             const inputField = form.querySelector('input[type=number]');
             const submitButton = form.querySelector('button[type=submit]');
             
             successAlert.setAttribute('hidden', 'hidden');
             errorAlert.setAttribute('hidden', 'hidden');
             inputField.setAttribute('disabled', true);
             submitButton.setAttribute('disabled', true);
             
             const response = await fetch(url, { method, body, headers });
             const data = await response.json();
             if (response.ok) {
                 const { successMessage, amountRemaining } =  data;
                 
                 successAlert.innerHTML = successMessage;
                 successAlert.removeAttribute('hidden');
                 if (amountRemaining) {
                     if (amountRemaining > 0) {
                         inputField.value = amountRemaining;
                     } else {
                         form.setAttribute('hidden', 'hidden');
                         expireForm.setAttribute('hidden', 'hidden');
                     }
                 }
             } else {
                 errorAlert.innerHTML = data.errorMessage;
                 errorAlert.removeAttribute('hidden');
             }
             inputField.removeAttribute('disabled');
             submitButton.removeAttribute('disabled');
         });
        
        // Expire invoice form
        delegate('submit', 'form#expire-invoice', async e => {
            e.preventDefault();
            
            const form = e.target;
            const url = expireForm.getAttribute('action');
            const method = expireForm.getAttribute('method');
            const submitButton = form.querySelector('button[type=submit]');
            const expireButton = form.querySelector('[type=submit]');
            successAlert.setAttribute('hidden', 'hidden');
            errorAlert.setAttribute('hidden', 'hidden');
            
            const response = await fetch(url, { method });
            const data = await response.json();
            if (response.ok) {
                successAlert.innerHTML = data.successMessage;
                successAlert.removeAttribute('hidden');
                expireButton.setAttribute('hidden', 'hidden');
                submitButton.removeAttribute('disabled');
            } else {
                errorAlert.innerHTML = data.errorMessage;
                errorAlert.removeAttribute('hidden');
            }
        });
    });
</script>

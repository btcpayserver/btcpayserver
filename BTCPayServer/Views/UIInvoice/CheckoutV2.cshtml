@inject LanguageService LangService
@inject BTCPayServerEnvironment Env
@inject IFileService FileService
@inject ThemeSettings Theme
@inject PaymentMethodHandlerDictionary PaymentMethodHandlerDictionary
@using BTCPayServer.Services
@using BTCPayServer.Abstractions.Contracts
@using BTCPayServer.Abstractions.TagHelpers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model PaymentModel
@{
    Layout = null;
    ViewData["Title"] = Model.HtmlTitle;

    var paymentMethodCount = Model.AvailableCryptos.Count;
    var logoUrl = !string.IsNullOrEmpty(Model.LogoFileId)
        ? await FileService.GetFileUrl(Context.Request.GetAbsoluteRootUri(), Model.LogoFileId)
        : Model.CustomLogoLink;
}
@functions {
    private string PaymentMethodName(PaymentModel.AvailableCrypto pm)
    {
        return Model.AltcoinsBuild
            ? $"{pm.PaymentMethodName} {pm.CryptoCode}"
            : pm.PaymentMethodName.Replace("Bitcoin (", "").Replace(")", "").Replace("Lightning ", "");
    }

    private string ToJsValue(object value)
    {
        return Safe.Json(value).ToString()?.Replace("\"", "'");
    }
}

<!DOCTYPE html>
<html lang="@Model.DefaultLang" class="@(Model.IsModal ? "checkout-modal" : "")">
<head>
    <partial name="LayoutHead"/>
    <meta name="robots" content="noindex,nofollow">
    <link href="~/checkout-v2/checkout.css" asp-append-version="true" rel="stylesheet" />
    @if (!string.IsNullOrEmpty(Model.CustomCSSLink))
    {
        <link href="@Model.CustomCSSLink" rel="stylesheet"/>
    }
    @if (!string.IsNullOrEmpty(Model.BrandColor))
    {
        <style>
            :root {
                --btcpay-primary: @Model.BrandColor;
                --btcpay-primary-bg-hover: @Model.BrandColor;
                --btcpay-primary-bg-active: @Model.BrandColor;
                --btcpay-primary-shadow: @Model.BrandColor;
                --btcpay-body-link-accent: @Model.BrandColor;
            }
        </style>
    }
</head>
<body class="min-vh-100">
    <div id="Checkout" class="wrap" v-cloak>
        <header>
            @if (!string.IsNullOrEmpty(logoUrl))
            {
                <img src="@logoUrl" alt="@Model.StoreName" class="logo @(!string.IsNullOrEmpty(Model.LogoFileId) ? "logo--square" : "")"/>
            }
            <h1 class="h5 mb-0">@Model.StoreName</h1>
        </header>
        <main class="shadow-lg">
            <nav v-if="isModal">
                <button type="button" v-if="isModal" id="close" v-on:click="close">
                    <vc:icon symbol="close"/>
                </button>
            </nav>
            <section id="payment" v-if="isActive">
                <h6 class="text-center mb-3 fw-semibold" v-if="srvModel.itemDesc" v-text="srvModel.itemDesc">@Model.ItemDesc</h6>
                @if (Model.IsUnsetTopUp)
                {
                    <h2 class="text-center mb-3">{{$t("Any amount")}}</h2>
                }
                else
                {
                    <h2 class="text-center" v-text="`${srvModel.btcDue} ${srvModel.cryptoCode}`" :data-clipboard="srvModel.btcDue">@Model.BtcDue @Model.CryptoCode</h2>
                    <h2 class="text-center" v-else v-text="`${srvModel.btcDue} ${srvModel.cryptoCode}`" :data-clipboard="srvModel.btcDue">@Model.BtcDue @Model.CryptoCode</h2>
                    <div class="info mt-3 mb-1" v-if="showTimer || showPaymentDueInfo">
                        <div class="timer" v-if="showTimer">
                            <span class="spinner-border spinner-border-sm" role="status"><span class="visually-hidden"></span></span>
                            <span>{{$t("This invoice will expire in", { timeLeft: timeText })}}</span>
                        </div>
                        <div class="payment-due" v-if="showPaymentDueInfo">
                            <vc:icon symbol="info"/>
                            <span>{{$t("The invoice hasn't been paid in full")}}</span>
                        </div>
                        <div>{{$t("still_due", { amountDue: srvModel.btcDue, cryptoCode: srvModel.cryptoCode })}}</div>
                    </div>
                    <button class="d-flex align-items-center btn btn-link payment-details-button" type="button" :aria-expanded="displayPaymentDetails ? 'true' : 'false'" v-on:click="displayPaymentDetails = !displayPaymentDetails">
                        <vc:icon symbol="caret-down"/>
                        <span class="ms-1 fw-semibold">{{$t("View Details")}}</span>
                    </button>
                    <div class="collapse payment-details" v-collapsible="displayPaymentDetails">
                        <payment-details :srv-model="srvModel" :is-active="isActive"></payment-details>
                    </div>
                }
                <div class="my-3">
                    @if (paymentMethodCount > 1)
                    {
                        <h6 class="text-center mb-3">{{$t("Pay with")}}</h6>
                        <div class="btcpay-pills d-flex flex-wrap align-items-center justify-content-center gap-2 pb-2">
                            @foreach (var crypto in Model.AvailableCryptos)
                            {
                                <a asp-action="Checkout" asp-route-invoiceId="@Model.InvoiceId" asp-route-paymentMethodId="@crypto.PaymentMethodId"
                                   class="btcpay-pill m-0"
                                   :class="{ active: pmId === @ToJsValue(crypto.PaymentMethodId) }"
                                   v-on:click.prevent="changePaymentMethod(@ToJsValue(crypto.PaymentMethodId))">
                                    @PaymentMethodName(crypto)
                                </a>
                            }
                        </div>
                    }
                    else
                    {
                        <h6 class="text-center mb-3">
                            {{$t("Pay with")}}
                            @PaymentMethodName(Model.AvailableCryptos.First())
                        </h6>
                    }
                </div>
                <component v-if="srvModel.uiSettings && srvModel.activated"
                           :srv-model="srvModel"
                           :is="srvModel.uiSettings.checkoutBodyVueComponentName"/>
            </section>
            <section id="result" v-else>
                <div id="paid" v-if="isPaid">
                    <div class="top">
                        <span class="icn">
                            <vc:icon symbol="payment-complete"/>
                        </span>
                        <h4>{{$t("Invoice paid")}}</h4>
                        <dl class="mb-3">
                            <div>
                                <dt>{{$t("Invoice ID")}}</dt>
                                <dd>{{srvModel.invoiceId}}</dd>
                            </div>
                            <div v-if="srvModel.orderId">
                                <dt>{{$t("Order ID")}}</dt>
                                <dd>{{srvModel.orderId}}</dd>
                            </div>
                        </dl>
                        <payment-details :srv-model="srvModel" :is-active="isActive" class="mb-5"></payment-details>
                    </div>
                    <div class="buttons">
                        <a class="btn btn-primary" :href="srvModel.receiptLink" v-if="srvModel.receiptLink" :target="isModal ? '_blank' : '_top'">{{$t('View receipt')}}</a>
                        <a class="btn btn-secondary" :href="srvModel.merchantRefLink" v-if="srvModel.merchantRefLink">{{$t('Return to StoreName', srvModel)}}</a>
                    </div>
                </div>
                <div id="expired" v-if="isUnpayable">
                    <div class="top">
                        <span class="icn">
                            <vc:icon symbol="invoice-expired"/>
                        </span>
                        <h4>{{$t("Invoice expired")}}</h4>
                        <dl class="mb-0">
                            <div>
                                <dt>{{$t("Invoice ID")}}</dt>
                                <dd>{{srvModel.invoiceId}}</dd>
                            </div>
                            <div v-if="srvModel.orderId">
                                <dt>{{$t("Order ID")}}</dt>
                                <dd>{{srvModel.orderId}}</dd>
                            </div>
                        </dl>
                        <div class="collapse payment-details" v-collapsible="displayPaymentDetails">
                            <payment-details :srv-model="srvModel" :is-active="isActive"></payment-details>
                        </div>
                        <button class="d-flex align-items-center btn btn-link payment-details-button" type="button" :aria-expanded="displayPaymentDetails ? 'true' : 'false'" v-on:click="displayPaymentDetails = !displayPaymentDetails">
                            <vc:icon symbol="caret-down"/>
                            <span class="ms-1 fw-semibold">{{$t("View Details")}}</span>
                        </button>
                        <p class="mt-4" v-html="$t('InvoiceExpired_Body_1', {storeName: srvModel.storeName, maxTimeMinutes: @Model.MaxTimeMinutes})"></p>
                        <p>{{$t("InvoiceExpired_Body_2")}}</p>
                        <p>{{$t("InvoiceExpired_Body_3")}}</p>
                    </div>
                    <div class="buttons">
                        <a class="btn btn-primary" :href="srvModel.merchantRefLink" v-if="srvModel.merchantRefLink">{{$t('Return to StoreName', srvModel)}}</a>
                    </div>
                </div>
            </section>
        </main>
        @if (Env.CheatMode)
        {
            <checkout-cheating v-if="isActive" invoice-id="@Model.InvoiceId" :btc-due="btcDue" :is-paid="isPaid" :payment-method-id="pmId"></checkout-cheating>
        }
        <footer>
            <div>
                <a href="https://btcpayserver.org" target="_blank" rel="noreferrer noopener">
                    Powered by
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 192 84" role="img" alt="BTCPay Server" class="ms-2">
                    <path d="M5.206 83.433a4.86 4.86 0 01-4.859-4.861V5.431a4.86 4.86 0 119.719 0v73.141a4.861 4.861 0 01-4.86 4.861" fill="currentColor" class="logo-brand-light"/>
                    <path d="M5.209 83.433a4.862 4.862 0 01-2.086-9.253L32.43 60.274 2.323 38.093a4.861 4.861 0 015.766-7.826l36.647 26.999a4.864 4.864 0 01-.799 8.306L7.289 82.964a4.866 4.866 0 01-2.08.469" fill="currentColor" class="logo-brand-medium"/>
                    <path d="M5.211 54.684a4.86 4.86 0 01-2.887-8.774L32.43 23.73 3.123 9.821a4.861 4.861 0 014.166-8.784l36.648 17.394a4.86 4.86 0 01.799 8.305l-36.647 27a4.844 4.844 0 01-2.878.948" fill="currentColor" class="logo-brand-light"/>
                    <path d="M10.066 31.725v20.553L24.01 42.006z" fill="currentColor" class="logo-brand-dark"/>
                    <path d="M10.066 5.431A4.861 4.861 0 005.206.57 4.86 4.86 0 00.347 5.431v61.165h9.72V5.431h-.001z" fill="currentColor" class="logo-brand-light"/>
                    <path d="M74.355 41.412c3.114.884 4.84 3.704 4.84 7.238 0 5.513-3.368 8.082-7.955 8.082H60.761V27.271h9.259c4.504 0 7.997 2.146 7.997 7.743 0 2.821-1.179 5.43-3.662 6.398m-4.293-.716c3.324 0 6.018-1.179 6.018-5.724 0-4.586-2.776-5.808-6.145-5.808h-7.197v11.531h7.324v.001zm1.052 14.099c3.366 0 6.06-1.768 6.06-6.145 0-4.713-3.072-6.144-6.901-6.144h-7.534v12.288h8.375v.001zM98.893 27.271v1.81h-8.122v27.651h-1.979V29.081h-8.123v-1.81zM112.738 26.85c5.01 0 9.554 2.524 10.987 8.543h-1.895c-1.348-4.923-5.303-6.732-9.134-6.732-6.944 0-10.605 5.681-10.605 13.341 0 8.08 3.661 13.256 10.646 13.256 4.125 0 7.828-1.85 9.26-7.279h1.895c-1.264 6.271-6.229 9.174-11.154 9.174-7.87 0-12.583-5.808-12.583-15.15 0-8.966 4.969-15.153 12.583-15.153M138.709 27.271c5.091 0 8.795 3.326 8.795 9.764 0 6.06-3.704 9.722-8.795 9.722h-7.746v9.976h-1.935V27.271h9.681zm0 17.549c3.745 0 6.816-2.397 6.816-7.827 0-5.429-2.947-7.869-6.816-7.869h-7.746V44.82h7.746zM147.841 56.732v-.255l11.741-29.29h.885l11.615 29.29v.255h-2.062l-3.322-8.501H153.27l-3.324 8.501h-2.105zm12.164-26.052l-6.059 15.697h12.078l-6.019-15.697zM189.551 27.271h2.104v.293l-9.176 16.92v12.248h-2.02V44.484l-9.216-16.961v-.252h2.147l3.997 7.492 4.043 7.786h.04l4.081-7.786z" fill="currentColor" class="logo-brand-text"/>
                    </svg>
                </a>
            </div>
            <select asp-for="DefaultLang" asp-items="@LangService.GetLanguageSelectListItems()" class="form-select w-auto" v-on:change="changeLanguage"></select>
        </footer>
    </div>
    <noscript>
        <div class="p-5 text-center">
            <h2>Javascript is currently disabled in your browser.</h2>
            <h5>Please enable Javascript and refresh this page for the best experience.</h5>
            <p>
                Alternatively, click below to continue to our
                <a asp-action="CheckoutNoScript" asp-route-invoiceId="@Model.InvoiceId">HTML-only invoice</a>.
            </p>
        </div>
    </noscript>
    <template id="payment-details">
        <dl v-cloak>
            <div>
                <dt>{{$t("Total Price")}}</dt>
                <dd :data-clipboard="srvModel.orderAmount">{{srvModel.orderAmount}} {{ srvModel.cryptoCode }}</dd>
            </div>
            <div v-if="srvModel.orderAmountFiat">
                <dt>{{$t("Total Fiat")}}</dt>
                <dd :data-clipboard="srvModel.orderAmountFiat">{{srvModel.orderAmountFiat}}</dd>
            </div>
            <div v-if="srvModel.orderAmountFiat && srvModel.cryptoCode">
                <dt>{{$t("Exchange Rate")}}</dt>
                <dd :data-clipboard="srvModel.rate">
                    <template v-if="srvModel.cryptoCodeSrv === 'Sats'">1 Sat = {{ srvModel.rate }}</template>
                    <template v-else>1 {{ srvModel.cryptoCodeSrv }} = {{ srvModel.rate }}</template>
                </dd>
            </div>
            <div v-if="srvModel.networkFee">
                <dt>{{$t("Network Cost")}}</dt>
                <dd :data-clipboard="srvModel.networkFee">
                    <template v-if="srvModel.txCountForFee > 0">{{$t("txCount", {count: srvModel.txCount})}} x</template>
                    {{ srvModel.networkFee }} {{ srvModel.cryptoCode }}
                </dd>
            </div>
            <div v-if="btcPaid > 0">
                <dt>{{$t("Amount Paid")}}</dt>
                <dd :data-clipboard="srvModel.btcPaid">{{srvModel.btcPaid }} {{ srvModel.cryptoCode }}</dd>
            </div>
            <div v-if="btcDue > 0">
                <dt>{{$t("Amount Due")}}</dt>
                <dd :data-clipboard="srvModel.btcDue">{{srvModel.btcDue}} {{ srvModel.cryptoCode }}</dd>
            </div>
            <div v-if="showRecommendedFee">
                <dt>{{$t("Recommended Fee")}}</dt>
                <dd :data-clipboard="srvModel.feeRate">{{$t("Feerate", { feeRate: srvModel.feeRate })}}</dd>
            </div>
        </dl>
    </template>
    <script src="~/vendor/vuejs/vue.min.js" asp-append-version="true"></script>
    <script src="~/vendor/vue-qrcode/vue-qrcode.min.js" asp-append-version="true"></script>
    <script src="~/vendor/i18next/i18next.js" asp-append-version="true"></script>
    <script src="~/vendor/i18next/i18nextXHRBackend.js" asp-append-version="true"></script>
    <script src="~/vendor/i18next/vue-i18next.js" asp-append-version="true"></script>
    <script src="~/js/copy-to-clipboard.js" asp-append-version="true"></script>
    <script src="~/main/utils.js" asp-append-version="true"></script>
    <script src="~/checkout-v2/checkout.js" asp-append-version="true"></script>
    @if (Env.CheatMode)
    {
        <partial name="Checkout-Cheating" model="@Model" />
    }
    <script>
        const statusUrl = @Safe.Json(Url.Action("GetStatus", new { invoiceId = Model.InvoiceId }));
        const statusWsUrl = @Safe.Json(Url.Action("GetStatusWebSocket", new { invoiceId = Model.InvoiceId }));
        const initialSrvModel = @Safe.Json(Model);
        const availableLanguages = @Safe.Json(LangService.GetLanguages().Select(language => language.Code));
        const defaultLang = @Safe.Json(Model.DefaultLang);
        const fallbackLanguage = "en";
        const startingLanguage = computeStartingLanguage();
        const STATUS_PAID = ['complete', 'confirmed', 'paid'];
        const STATUS_UNPAID = ['new', 'paidPartial'];
        const STATUS_UNPAYABLE =  ['expired', 'invalid'];
        const qrOptions = { margin: 1, type: 'svg', color: { dark: '#000', light: '#fff' } };

        i18next
            .use(window.i18nextXHRBackend)
            .init({
                backend: {
                    loadPath: @Safe.Json($"{Model.RootPath}locales/{{{{lng}}}}.json")
                },
                lng: startingLanguage,
                fallbackLng: fallbackLanguage,
                nsSeparator: false,
                keySeparator: false,
                load: 'currentOnly'
            });

        function computeStartingLanguage() {
            if (urlParams.lang && isLanguageAvailable(urlParams.lang)) {
                return urlParams.lang;
            }
            else if (isLanguageAvailable(defaultLang)) {
                return defaultLang;
            } else {
                return fallbackLanguage;
            }
        }

        function isLanguageAvailable(languageCode) {
            return availableLanguages.indexOf(languageCode) >= 0;
        }

        const i18n = new VueI18next(i18next);
        const eventBus = new Vue();
        
        const PaymentDetails = Vue.component('payment-details', {
            el: '#payment-details',
            props: {
                srvModel: Object,
                isActive: Boolean
            },
            computed: {
               btcDue () {
                   return parseFloat(this.srvModel.btcDue);
               },
               btcPaid () {
                   return parseFloat(this.srvModel.btcPaid);
               },
               showRecommendedFee () {
                   return this.isActive && this.srvModel.showRecommendedFee && this.srvModel.feeRate;
               },
            }
        });

        new Vue({
            i18n,
            el: '#Checkout',
            components: {
                PaymentDetails
            },
            data () {
                const srvModel = initialSrvModel;
                return {
                    srvModel,
                    displayPaymentDetails: false,
                    remainingSeconds: srvModel.expirationSeconds,
                    expirationPercentage: 0,
                    emailAddressInput: "",
                    emailAddressInputDirty: false,
                    emailAddressInputInvalid: false,
                    paymentMethodId: null,
                    endData: null,
                    isModal: srvModel.isModal
                }
            },
            computed: {
                isUnpayable () {
                    return STATUS_UNPAYABLE.includes(this.srvModel.status);
                },
                isPaid () {
                    return STATUS_PAID.includes(this.srvModel.status);
                },
                isActive () {
                    return !this.isUnpayable && !this.isPaid;
                },
                showTimer () {
                    return this.isActive && (this.expirationPercentage >= 75 || this.minutesLeft < 5);
                },
                showPaymentDueInfo () {
                    return this.btcPaid > 0 && this.btcDue > 0;
                },
                showRecommendedFee () {
                    return this.isActive() && this.srvModel.showRecommendedFee && this.srvModel.feeRate;
                },
                btcDue () {
                    return parseFloat(this.srvModel.btcDue);
                },
                btcPaid () {
                    return parseFloat(this.srvModel.btcPaid);
                },
                pmId () {
                    return this.paymentMethodId || this.srvModel.paymentMethodId;
                },
                minutesLeft () {
                    return Math.floor(this.remainingSeconds / 60);
                },
                secondsLeft () {
                    return Math.floor(this.remainingSeconds % 60);
                },
                timeText () {
                    return this.remainingSeconds > 0
                        ? `${this.padTime(this.minutesLeft)}:${this.padTime(this.secondsLeft)}`
                        : '00:00';
                }
            },
            mounted () {
                this.updateData(this.srvModel);
                this.updateTimer();
                if (this.isActive) {
                    this.listenIn();
                }
                window.parent.postMessage('loaded', '*');
            },
            methods: {
                changePaymentMethod (paymentMethodId) {
                    if (this.pmId !== paymentMethodId) {
                        this.paymentMethodId = paymentMethodId;
                        this.fetchData();
                    }
                },
                changeLanguage (e) {
                    const lang = e.target.value;
                    if (isLanguageAvailable(lang)) {
                        i18next.changeLanguage(lang);
                    }
                },
                padTime (val) {
                    return val.toString().padStart(2, '0');
                },
                close () {
                    window.parent.postMessage('close', '*');
                },
                updateTimer () {
                    this.remainingSeconds = Math.floor((this.endDate.getTime() - new Date().getTime())/1000);
                    this.expirationPercentage = 100 - Math.floor((this.remainingSeconds / this.srvModel.maxTimeSeconds) * 100);
                    if (this.isActive) {
                        setTimeout(this.updateTimer, 500);
                    }
                },
                listenIn () {
                    let socket;
                    const updateFn = this.fetchData;
                    const supportsWebSockets = 'WebSocket' in window && window.WebSocket.CLOSING === 2;
                    if (supportsWebSockets) {
                        const protocol = window.location.protocol.replace('http', 'ws');
                        const wsUri = `${protocol}//${window.location.host}${statusWsUrl}`;
                        try {
                            socket = new WebSocket(wsUri);
                            socket.onmessage = e => {
                                if (e.data === 'ping') return;
                                updateFn();
                            };
                            socket.onerror = e => {
                                console.error('Error while connecting to websocket for invoice notifications (callback):', e);
                            };
                        }
                        catch (e) {
                            console.error('Error while connecting to websocket for invoice notifications', e);
                        }
                    }
                    // fallback in case there is no websocket support
                    (function watcher() {
                        setTimeout(() => {
                            if (socket === null || socket.readyState !== 1) {
                                updateFn();
                            }
                            watcher();
                        }, 2000);
                    })();
                },
                async fetchData () {
                    const url = `${statusUrl}&paymentMethodId=${this.pmId}`;
                    const response = await fetch(url);
                    if (response.ok) {
                        const data = await response.json();
                        this.updateData(data);
                    }
                },
                updateData (data) {
                    if (this.srvModel.status !== data.status) {
                        const { invoiceId } = this.srvModel;
                        const { status } = data;
                        window.parent.postMessage({ invoiceId, status }, '*');
                    }

                    // displaying satoshis for lightning payments
                    data.cryptoCodeSrv = data.cryptoCode;

                    const newEnd = new Date();
                    newEnd.setSeconds(newEnd.getSeconds() + data.expirationSeconds);
                    this.endDate = newEnd;

                    // updating ui
                    this.srvModel = data;
                    eventBus.$emit('data-fetched', this.srvModel);

                    if (this.isPaid && data.redirectAutomatically && data.merchantRefLink) {
                        setTimeout(() => {
                            if (this.isModal && window.top.location === data.merchantRefLink){
                                this.close();
                            } else {
                                window.top.location = data.merchantRefLink;
                            }
                        }, 2000);
                    }
                }
            }
        });
    </script>
    @foreach (var paymentMethodHandler in PaymentMethodHandlerDictionary
        .Select(handler => handler.GetCheckoutUISettings())
        .Where(settings => settings != null)
        .DistinctBy(pm => pm.ExtensionPartial))
    {
        <partial name="@paymentMethodHandler.ExtensionPartial-v2" model="@Model"/>
    }
    @await Component.InvokeAsync("UiExtensionPoint", new { location = "checkout-end", model = Model })
</body>
</html>

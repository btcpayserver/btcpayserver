@inject LanguageService LangService
@inject BTCPayServerEnvironment Env
@inject IFileService FileService;
@inject ThemeSettings Theme
@inject PaymentMethodHandlerDictionary PaymentMethodHandlerDictionary
@using BTCPayServer.Services
@using BTCPayServer.Abstractions.Contracts
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using BundlerMinifier.TagHelpers
@using BTCPayServer.Abstractions.TagHelpers
@model PaymentModel
@{
    Layout = null;
    ViewData["Title"] = Model.HtmlTitle;

    var paymentMethodCount = Model.AvailableCryptos.Count;
    var logoUrl = !string.IsNullOrEmpty(Model.LogoFileId)
        ? await FileService.GetFileUrl(Context.Request.GetAbsoluteRootUri(), Model.LogoFileId)
        : Model.CustomLogoLink;
}

<!DOCTYPE html>
<html lang="@Safe.Json(Model.DefaultLang)">
<head>
    <partial name="LayoutHead"/>
    <meta name="robots" content="noindex,nofollow">
    @if (!string.IsNullOrEmpty(Model.CustomCSSLink))
    {
        <link href="@Model.CustomCSSLink" rel="stylesheet"/>
    }
    <style>
        :root {
            --logo-size: 3rem;
            --main-min-height: 600px;
        }
        body {
            padding: var(--btcpay-space-l) var(--btcpay-space-m);
        }
        header,
        footer {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: var(--btcpay-space-l) var(--btcpay-space-s);
            gap: var(--btcpay-space-m);
        }
        main {
            border-radius: var(--btcpay-border-radius-l);
            background-color: var(--btcpay-bg-tile);
        }
        section {
            display: none;
            min-height: var(--main-min-height);
            padding: var(--btcpay-space-l);
        }
        section.current {
            display: block;
        }
        section h4,
        section h5,
        section h6 {
            margin-bottom: 1.5rem;
            font-weight: var(--btcpay-font-weight-semibold);
            text-align: center;
        }
        section .top {
            flex: 1;
        }
        section .buttons {
            display: flex;
            flex-direction: column;
            gap: var(--btcpay-space-m);
        }
        .logo {
            height: var(--logo-size);
        }
        .logo--square {
            width: var(--logo-size);
            border-radius: 50%;
        }
        .wrap {
            max-width: 400px;
            margin: 0 auto;
        }
        #form > form,
        #result > div {
            display: flex;
            flex-direction: column;
            min-height: var(--main-min-height);
        }
        #result .top .icon {
            display: block;
            width: 3rem;
            height: 3rem;
            margin: 1.5rem auto;
        }
    </style>
    @if (Model.IsModal)
    {
        <style>
            body {
                background: rgba(25, 25, 25, 0.9);
            }
            .close-icon {
                display: flex;
            }
        </style>
    }
</head>
<body class="min-vh-100">
    <div id="Checkout" class="wrap" v-cloak>
        <header>
            @if (!string.IsNullOrEmpty(logoUrl))
            {
                <img src="@logoUrl" alt="@Model.StoreName" class="logo @(!string.IsNullOrEmpty(Model.LogoFileId) ? "logo--square" : "")"/>
            }
            <h1 class="h5">@Model.StoreName</h1>
        </header>
        <main>
            <div class="timer" v-if="expiringSoon">
                {{$t("Invoice will expire in")}} {{timerText}}
                <div class="spinner-border-sm text-light" role="status">
                    <span class="visually-hidden"></span>
                </div>
            </div>
            <section id="form" :class="{ 'current': step === 'form' }">
                <form method="post" asp-action="UpdateForm" asp-route-invoiceId="@Model.InvoiceId" v-on:submit.prevent="onFormSubmit">
                    <div class="top">
                        <h6>{{$t("Please fill out the following")}}</h6>
                        <div>
                            TODO: Forms integration
                        </div>
                    </div>
                    <div class="buttons">
                        <button type="submit" class="btn btn-primary" :disabled="formSubmitPending" :class="{ 'loading': formSubmitPending }">
                            {{$t("Continue")}}
                            <span class="spinner-border spinner-border-sm ms-1" role="status" v-if="formSubmitPending">
                                <span class="visually-hidden"></span>
                            </span>
                        </button>
                    </div>
                </form>
            </section>
            <section id="payment" :class="{ 'current': step === 'payment' }">
                <div>
                    <h6>{{ srvModel.itemDesc }}</h6>
                </div>
                <div class="single-item-order buyerTotalLine" v-on:click="toggleLineItems" :class="{ 'expanded': lineItemsExpanded }">
                    <div class="single-item-order__right">
                        <div class="single-item-order__right__btc-price" v-if="srvModel.status === 'paid' && !srvModel.isUnsetTopUp">
                            <span>{{ srvModel.btcPaid }} {{ srvModel.cryptoCode }}</span>
                        </div>
                        <div class="single-item-order__right__btc-price" v-if="srvModel.status !== 'paid' && !srvModel.isUnsetTopUp && parseFloat(srvModel.btcDue) > 0">
                            <span>{{ srvModel.btcDue }} {{ srvModel.cryptoCode }}</span>
                        </div>
                        <div class="single-item-order__right__ex-rate" v-if="srvModel.orderAmountFiat && srvModel.cryptoCode">
                            <span v-if="srvModel.cryptoCodeSrv === 'Sats'">1 Sat = {{ srvModel.rate }}</span>
                            <span v-else>1 {{ srvModel.cryptoCodeSrv }} = {{ srvModel.rate }}</span>
                        </div>
                    </div>
                    <span class="fa fa-angle-double-down" v-if="!srvModel.isUnsetTopUp"></span>
                    <span class="fa fa-angle-double-up" v-if="!srvModel.isUnsetTopUp"></span>
                </div>
                <div class="single-item-order__left">
                    <div style="font-weight: 600;" id="pay-with-text">
                        {{$t("Pay with")}}
                    </div>
                </div>
                <div class="single-item-order__right">
                    @if (paymentMethodCount > 1)
                    {
                        <div class="paywithRowRight cursorPointer">
                            <span class="payment__currencies " v-show="!changingCurrencies">
                                <img :src="srvModel.cryptoImage"/>
                                <span>{{srvModel.paymentMethodName}} ({{srvModel.cryptoCodeSrv}})</span>
                                <span v-show="srvModel.isLightning">&#9889;</span>
                                <span class="clickable_indicator fa fa-angle-right"></span>
                            </span>
                        </div>
                        <div>
                            <ul>
                                @foreach (var crypto in Model.AvailableCryptos)
                                {
                                    <li>
                                        <a href="@crypto.Link" class="payment-method" data-payment-method="@crypto.PaymentMethodId" rel="noreferrer noopener">
                                            <img alt="@crypto.PaymentMethodName" src="@crypto.CryptoImage" asp-append-version="true"/>
                                            @crypto.PaymentMethodName
                                            @(crypto.IsLightning ? Html.Raw("&#9889;") : null)
                                            <span>@crypto.CryptoCode</span>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </div>
                    }
                    else
                    {
                        <div class="payment__currencies_noborder">
                            <img :src="srvModel.cryptoImage" :alt="srvModel.paymentMethodName"/>
                            <span>{{srvModel.paymentMethodName}} ({{srvModel.cryptoCodeSrv}})</span>
                            <span v-show="srvModel.isLightning">&#9889;</span>
                        </div>
                    }
                    <div v-show="changingCurrencies || loading">
                        <div class="spinner-border text-light" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="line-items" v-if="!srvModel.isUnsetTopUp">
                    <div class="extraPayment" v-if="srvModel.status === 'new' && srvModel.txCount > 1">
                        {{$t("NotPaid_ExtraTransaction")}}
                    </div>
                    <div class="line-items" :class="{ 'expanded': lineItemsExpanded}">
                        <div class="line-items__item">
                            <div class="line-items__item__label">{{$t("Order Amount")}}</div>
                            <div class="line-items__item__value">{{srvModel.orderAmount}} {{ srvModel.cryptoCode }}</div>
                        </div>
                        <div class="line-items__item line-items_fiatvalue" v-if="srvModel.orderAmountFiat">
                            <div class="line-items__item__label">&nbsp;</div>
                            <div class="line-items__item__value single-item-order__right__ex-rate">
                                {{srvModel.orderAmountFiat}}
                            </div>
                        </div>
                        <div class="line-items__item" v-show="srvModel.isMultiCurrency || srvModel.txCountForFee > 0">
                            <div class="line-items__item__label">
                                <span>{{$t("Network Cost")}}</span>
                            </div>
                            <div class="line-items__item__value">
                                <span v-if="srvModel.isMultiCurrency">
                                    {{ srvModel.networkFee }} {{ srvModel.cryptoCode }}
                                </span>
                                <span v-else-if="srvModel.txCountForFee > 0">
                                    {{$t("txCount", {count: srvModel.txCount})}} x {{ srvModel.networkFee }} {{ srvModel.cryptoCode }}
                                </span>
                            </div>
                        </div>
                        <div class="line-items__item">
                            <div class="line-items__item__label">
                                <span>{{$t("Already Paid")}}</span>
                            </div>
                            <div class="line-items__item__value">-{{srvModel.btcPaid }} {{ srvModel.cryptoCode }}</div>
                        </div>
                        <div class="line-items__item line-items__item--total" v-show="parseFloat(srvModel.btcDue) > 0">
                            <div class="line-items__item__label">{{$t("Due")}}</div>
                            <div class="line-items__item__value">{{srvModel.btcDue}} {{ srvModel.cryptoCode }}</div>
                        </div>
                    </div>
                </div>
                <component v-if="srvModel.uiSettings && srvModel.uiSettings.checkoutHeaderVueComponentName && srvModel.activated"
                           :srv-model="srvModel"
                           :is="srvModel.uiSettings.checkoutHeaderVueComponentName">
                </component>
                <div class="payment-box" :class="{ 'with-recommended-fee': showRecommendedFee }">
                    <component v-if="srvModel.uiSettings && srvModel.uiSettings.checkoutBodyVueComponentName && srvModel.activated"
                               :srv-model="srvModel"
                               :is="srvModel.uiSettings.checkoutBodyVueComponentName">
                    </component>
                </div>
            </section>
            <section id="result" :class="{ 'current': step === 'result' }">
                <div id="paid" v-if="invoicePaid">
                    <div class="top">
                        <span class="text-success">
                            <vc:icon symbol="payment-complete"/>
                        </span>
                        <h4>{{$t("This invoice has been paid")}}</h4>
                        <dl>
                            <div>
                                <dt>{{$t("Invoice ID")}}</dt>
                                <dd>{{srvModel.invoiceId}}</dd>
                            </div>
                            <div>
                                <dt>{{$t("Order ID")}}</dt>
                                <dd>{{srvModel.orderId}}</dd>
                            </div>
                        </dl>
                        <dl>
                            <div>
                                <dt>{{$t("Order Amount")}}</dt>
                                <dd>{{srvModel.orderAmount}} {{ srvModel.cryptoCode }}</dd>
                            </div>
                            <div v-if="srvModel.orderAmountFiat">
                                <dt>{{$t("Order Amount")}}</dt>
                                <dd>{{srvModel.orderAmountFiat}}</dd>
                            </div>
                            <div v-if="srvModel.isMultiCurrency || srvModel.txCountForFee > 0">
                                <dt>{{$t("Network Cost")}}</dt>
                                <dd v-if="srvModel.isMultiCurrency">{{ srvModel.networkFee }} {{ srvModel.cryptoCode }}</dd>
                                <dd v-else-if="srvModel.txCountForFee > 0">{{$t("txCount", {count: srvModel.txCount})}} x {{ srvModel.networkFee }} {{ srvModel.cryptoCode }}</dd>
                            </div>
                            <div>
                                <dt>{{$t("Amount Paid")}}</dt>
                                <dd>{{srvModel.btcPaid }} {{ srvModel.cryptoCode }}</dd>
                            </div>
                        </dl>
                    </div>
                    <div class="buttons">
                        <a class="btn btn-primary" :href="srvModel.receiptLink" v-if="srvModel.receiptLink" :target="isModal ? '_blank' : '_top'">{{$t('View receipt')}}</a>
                        <a class="btn btn-secondary" :href="srvModel.merchantRefLink" v-if="srvModel.merchantRefLink">{{$t('Return to StoreName', srvModel)}}</a>
                    </div>
                </div>
                <div id="expired" v-if="invoiceUnpayable">
                    <div class="top">
                        <span class="text-muted">
                            <vc:icon symbol="invoice-expired" />
                        </span>
                        <h4>{{$t("Invoice expired")}}</h4>
                        <dl>
                            <div>
                                <dt>{{$t("Invoice ID")}}</dt>
                                <dd>{{srvModel.invoiceId}}</dd>
                            </div>
                            <div>
                                <dt>{{$t("Order ID")}}</dt>
                                <dd>{{srvModel.orderId}}</dd>
                            </div>
                        </dl>
                        <p v-html="$t('InvoiceExpired_Body_1', {storeName: srvModel.storeName, maxTimeMinutes: @Model.MaxTimeMinutes})"></p>
                        <p>{{$t("InvoiceExpired_Body_2")}}</p>
                        <p>{{$t("InvoiceExpired_Body_3")}}</p>
                    </div>
                    <div class="buttons">
                        <a class="btn btn-primary" :href="srvModel.merchantRefLink" v-if="srvModel.merchantRefLink">{{$t('Return to StoreName', srvModel)}}</a>
                    </div>
                </div>
            </section>
        </main>
        @if (Env.CheatMode)
        {
            <template v-if="step === 'payment'">
                <partial name="Checkout-Testing"/>
            </template>
        }
        <footer>
            <select asp-for="DefaultLang" asp-items="@LangService.GetLanguageSelectListItems()"></select>
            <div class="text-muted my-2">
                Powered by <a href="https://btcpayserver.org" target="_blank" rel="noreferrer noopener">BTCPay Server</a>
            </div>
            @if (!Theme.CustomTheme)
            {
                <vc:theme-switch css-class="text-muted ms-n3" responsive="none"/>
            }
        </footer>
    </div>
    <noscript>
        <div class="p-5 text-center">
            <h2>Javascript is currently disabled in your browser.</h2>
            <h5>Please enable Javascript and refresh this page for the best experience.</h5>
            <p>
                Alternatively, click below to continue to our
                <a asp-action="CheckoutNoScript" asp-route-invoiceId="@Model.InvoiceId">HTML-only invoice</a>.
            </p>
        </div>
    </noscript>
    <script src="~/vendor/vuejs/vue.min.js" asp-append-version="true"></script>
    <script src="~/vendor/vue-qrcode/vue-qrcode.min.js" asp-append-version="true"></script>
    <script src="~/vendor/i18next/i18next.js" asp-append-version="true"></script>
    <script src="~/vendor/i18next/i18nextXHRBackend.js" asp-append-version="true"></script>
    <script src="~/vendor/i18next/vue-i18next.js" asp-append-version="true"></script>
    <script src="~/js/copy-to-clipboard.js" asp-append-version="true"></script>
    <script src="~/main/utils.js" asp-append-version="true"></script>
    <script src="~/checkout-v2/querystring.js" asp-append-version="true"></script>
    <script>
        const statusUrl = @Safe.Json(Url.Action("GetStatus", new { invoiceId = Model.InvoiceId }));
        const statusWsUrl = @Safe.Json(Url.Action("GetStatusWebSocket", new { invoiceId = Model.InvoiceId }));
        const initialSrvModel = @Safe.Json(Model);
        const availableLanguages = @Safe.Json(LangService.GetLanguages().Select(language => language.Code));
        const defaultLang = @Safe.Json(Model.DefaultLang);
        const fallbackLanguage = "en";
        const startingLanguage = computeStartingLanguage();
        const STATUS_PAID = ['complete', 'confirmed', 'paid'];
        const STATUS_UNPAID = ['new', 'paidPartial'];
        const STATUS_UNPAYABLE =  ['expired', 'invalid'];
        
        i18next
            .use(window.i18nextXHRBackend)
            .init({
                backend: {
                    loadPath: @Safe.Json($"{Model.RootPath}locales/{{{{lng}}}}.json")
                },
                lng: startingLanguage,
                fallbackLng: fallbackLanguage,
                nsSeparator: false,
                keySeparator: false
            });

        function computeStartingLanguage() {
            if (urlParams.lang && isLanguageAvailable(urlParams.lang)) {
                return urlParams.lang;
            }
            else if (isLanguageAvailable(defaultLang)) {
                return defaultLang;
            } else {
                return fallbackLanguage;
            }
        }

        function changeLanguage(lang) {
            if (isLanguageAvailable(lang)) {
                i18next.changeLanguage(lang);
            }
        }

        function isLanguageAvailable(languageCode) {
            return availableLanguages.indexOf(languageCode) >= 0;
        }

        const i18n = new VueI18next(i18next);
        const eventBus = new Vue();
        
        new Vue({
            i18n,
            el: '#Checkout',
            data () {
                const srvModel = initialSrvModel;
                const step = srvModel.requiresRefundEmail || srvModel.checkoutFormId
                    ? 'form'
                    : '@(paymentMethodCount > 1 ? "payment-method" : "payment")';
                return {
                    srvModel,
                    step,
                    end: new Date(),
                    expirationPercentage: 0,
                    timerText: "@Model.TimeLeft",
                    emailAddressInput: "",
                    emailAddressInputDirty: false,
                    emailAddressInputInvalid: false,
                    formSubmitPending: false,
                    lineItemsExpanded: false,
                    changingCurrencies: false,
                    loading: true,
                    isModal: srvModel.isModal
                }
            },
            computed: {
                expiringSoon () {
                    return this.expirationPercentage >= 75 && !this.invoiceUnpayable && !this.invoicePaid;
                },
                showRecommendedFee () {
                    return  this.srvModel.showRecommendedFee && this.srvModel.feeRate !== 0;
                },
                invoiceUnpayable () {
                    return STATUS_UNPAYABLE.includes(this.srvModel.status);
                },
                invoicePaid () {
                    return STATUS_PAID.includes(this.srvModel.status);
                }
            },
            mounted () {
                this.startProgressTimer();
                this.listenIn();
                this.onDataCallback(this.srvModel);
                if (this.srvModel.status === 'new' && this.srvModel.txCount > 1) {
                    this.onlyExpandLineItems();
                }
                window.parent.postMessage('loaded', '*');
                this.loading = false;
            },
            methods: {
                onlyExpandLineItems () {
                    if (!this.lineItemsExpanded) {
                        this.toggleLineItems();
                    }},
                toggleLineItems () {
                    this.lineItemsExpanded = !this.lineItemsExpanded;
                },
                changeCurrency (currency) {
                    if (currency !== null && this.srvModel.paymentMethodId !== currency) {
                        this.changingCurrencies = true;
                        this.srvModel.paymentMethodId = currency;
                        this.fetchData();
                    }
                },
                close () {
                    window.parent.postMessage('close', '*');
                },
                startProgressTimer () {
                    const timeLeftS = this.endDate? (this.endDate.getTime() - new Date().getTime())/1000 : this.srvModel.expirationSeconds;
                    this.expirationPercentage = 100 - ((timeLeftS / this.srvModel.maxTimeSeconds) * 100);
                    this.timerText = this.updateTimerText(timeLeftS);
                    if (this.expirationPercentage < 100 && STATUS_UNPAID.includes(this.srvModel.status)){
                        setTimeout(this.startProgressTimer, 500);
                    }
                },
                updateTimerText (timer) {
                    if (timer >= 0) {
                        let minutes = parseInt(timer / 60, 10);
                        minutes = minutes < 10 ? "0" + minutes : minutes;
                        let seconds = parseInt(timer % 60, 10);
                        seconds = seconds < 10 ? "0" + seconds : seconds;
                        return `${minutes}:${seconds}`;
                    } else {
                        return '00:00';
                    }
                },
                listenIn () {
                    let socket;
                    const updateFn = this.fetchData;
                    const supportsWebSockets = 'WebSocket' in window && window.WebSocket.CLOSING === 2;
                    if (supportsWebSockets) {
                        const protocol = window.location.protocol.replace('http', 'ws'); 
                        const wsUri = `${protocol}//${window.location.host}${statusWsUrl}`;
                        try {
                            socket = new WebSocket(wsUri);
                            socket.onmessage = e => {
                                if (e.data === 'ping') return;
                                updateFn();
                            };
                            socket.onerror = e => {
                                console.error('Error while connecting to websocket for invoice notifications (callback):', e);
                            };
                        }
                        catch (e) {
                            console.error('Error while connecting to websocket for invoice notifications', e);
                        }
                    }
                    (function watcher() {
                        setTimeout(() => {
                            if (socket === null || socket.readyState !== 1) {
                                updateFn();
                            }
                            watcher();
                        }, 2000);
                    })();
                },
                async onFormSubmit (e) {
                    const form = e.target;
                    const url = form.getAttribute('action');
                    const method = form.getAttribute('method');
                    const body = new FormData(form);
                    const headers = { 'Content-Type': 'application/json' };
                    
                    this.formSubmitPending = true;
                    const response = await fetch(url, { method, body, headers });
                    this.formSubmitPending = false;
                    if (response.ok) {
                        // TODO
                        this.step = 'payment';
                    }
                },
                async fetchData () {
                    const url = `${statusUrl}&paymentMethodId=${this.srvModel.paymentMethodId}`;
                    const response = await fetch(url);
                    const data = await response.json();
                    if (response.ok) {
                        this.onDataCallback(data);
                    }
                },
                onDataCallback (jsonData) {
                    if (this.srvModel.status !== jsonData.status) {
                        const { invoiceId } = this.srvModel;
                        const { status } = jsonData;
                        window.parent.postMessage({ invoiceId, status }, "*");
                    }
                    if (jsonData.paymentMethodId === this.srvModel.paymentMethodId) {
                        this.changingCurrencies = false;
                    }
                    // displaying satoshis for lightning payments
                    jsonData.cryptoCodeSrv = jsonData.cryptoCode;
                    // expand line items to show details on amount due for multi-transaction payment
                    if (this.srvModel.txCount === 1 && jsonData.txCount > 1) {
                        this.onlyExpandLineItems();
                    }
                    const newEnd = new Date();
                    newEnd.setSeconds(newEnd.getSeconds()+ jsonData.expirationSeconds);
                    this.endDate = newEnd;
                    // updating ui
                    this.srvModel = jsonData;

                    eventBus.$emit("data-fetched", this.srvModel);
                    if (this.invoicePaid && jsonData.redirectAutomatically && jsonData.merchantRefLink) {
                        this.loading = true;
                        setTimeout(function () {
                            if (this.isModal && window.top.location == jsonData.merchantRefLink){
                                this.close();
                            } else {
                                window.top.location = jsonData.merchantRefLink;
                            }
                        }.bind(this), 2000);
                    }
                }
            }
        });
    </script>
    @foreach (var paymentMethodHandler in PaymentMethodHandlerDictionary.Select(handler => handler.GetCheckoutUISettings()).Where(settings => settings != null))
    {
        <partial name="@paymentMethodHandler.ExtensionPartial-v2" model="@Model"/>
    }
    @await Component.InvokeAsync("UiExtensionPoint", new { location = "checkout-end", model = Model })
</body>
</html>

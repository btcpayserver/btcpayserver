@using BTCPayServer.Plugins
@model BTCPayServer.Models.ServerViewModels.PluginPartialViewModel
@inject PluginService PluginService
@{
    var installed = Model.Installed.ToDictionary(plugin => plugin.Identifier, plugin => plugin.Version);

    bool DependentOn(string plugin)
    {
        foreach (var installedPlugin in Model.Installed)
        {
            if (installedPlugin.Dependencies.Any(dep => dep.Identifier.Equals(plugin, StringComparison.InvariantCultureIgnoreCase)))
            {
                return true;
            }
        }

        var pendingInstalls = Model.Commands.Where(tuple => tuple.command != "uninstall").Select(tuple => tuple.plugin).Distinct();
        foreach (var pendingInstall in pendingInstalls)
        {
            if (Model.Available.Any(availablePlugin => availablePlugin.Identifier.Equals(pendingInstall, StringComparison.InvariantCultureIgnoreCase) &&
                                                       availablePlugin.Dependencies.Any(dep => dep.Identifier.Equals(plugin, StringComparison.InvariantCultureIgnoreCase))))
            {
                return true;
            }
        }
        return false;
    }
}

<div class="modal fade" id="@Model.ModalId" tabindex="-1" aria-labelledby="pluginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-header border-0 pb-0">
                <h2 class="modal-title px-3" id="pluginModalLabel">@Model.Plugin.Name</h2>
                <button type="button" class="btn-close me-3" data-bs-dismiss="modal" aria-label="Close"><vc:icon symbol="close" /></button>
            </div>
            <div class="modal-body pt-0">
                <div class="p-3 w-100">
                    <div class="row">
                        <div class="col-lg-7">
                            <p>@Model.Plugin.Description</p>
                        </div>
                        <div class="col-lg-5">
                            <div class="d-flex flex-column align-items-start align-items-md-end">

                                @{
                                    var pendingAction = Model.Commands.LastOrDefault(tuple => tuple.plugin.Equals(Model.Plugin.Identifier, StringComparison.InvariantCultureIgnoreCase)).command;
                                    var exclusivePendingAction = true;

                                    var versionOfPendingInstall = PluginService.GetVersionOfPendingInstall(Model.Plugin.Identifier);
                                }

                                <div class="card-footer border-0 pb-3 d-flex gap-2">
                                    @if (pendingAction is not null && Model.UpdateAvailable)
                                    {
                                        var isUpdateAction = Model.Commands.Last(tuple => tuple.plugin.Equals(Model.Plugin.Identifier, StringComparison.InvariantCultureIgnoreCase)).command == "update";
                                        if (isUpdateAction)
                                        {
                                            exclusivePendingAction = versionOfPendingInstall == Model.MatchedPlugin.Version;
                                        }
                                    }
                                    @if (pendingAction is not null)
                                    {
                                        <form asp-action="CancelPluginCommands" asp-route-plugin="@Model.Plugin.Identifier">
                                            <button type="submit" class="btn btn-outline-secondary">Cancel pending @pendingAction @(versionOfPendingInstall is null ? "" : $"of {versionOfPendingInstall}")</button>
                                        </form>
                                    }
                                    @if (pendingAction is null || !exclusivePendingAction)
                                    {
                                        @if (Model.UpdateAvailable && Model.MatchedPlugin != null)
                                        {
                                            if (PluginManager.DependenciesMet(Model.MatchedPlugin.Dependencies, installed))
                                            {
                                                <form asp-action="InstallPlugin" asp-route-plugin="@Model.Plugin.Identifier" asp-route-version="@Model.MatchedPlugin.Version" asp-route-update="true" class="me-3">
                                                    <button type="submit" class="btn btn-secondary">Update</button>
                                                </form>
                                            }
                                            else
                                            {
                                                <form asp-action="InstallPlugin" asp-route-plugin="@Model.Plugin.Identifier" asp-route-version="@Model.MatchedPlugin.Version" asp-route-update="true" class="me-3">
                                                    <button title="Schedule upgrade for when the dependencies have been met to ensure a smooth update" data-bs-toggle="tooltip" type="submit" class="btn btn-secondary">Schedule update</button>
                                                </form>
                                            }
                                        }
                                        @if (!installed.ContainsKey(Model.Plugin.Identifier))
                                        {
                                            <form asp-action="InstallPlugin" asp-route-plugin="@Model.Plugin.Identifier" asp-route-version="@Model.Plugin.Version">
                                                <button type="submit" class="btn btn-primary">Install</button>
                                            </form>
                                        }
                                        else
                                        {
                                            @if (DependentOn(Model.Plugin.Identifier))
                                            {
                                                <button type="button" class="btn btn-outline-danger" data-bs-toggle="tooltip" title="This plugin cannot be uninstalled as it is depended on by other plugins.">
                                                    Uninstall <vc:icon symbol="warning" />
                                                </button>
                                            }
                                            else
                                            {
                                                <form asp-action="UnInstallPlugin" asp-route-plugin="@Model.Plugin.Identifier">
                                                    <button type="submit" class="btn btn-outline-danger">Uninstall</button>
                                                </form>
                                            }
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-between mt-3 flex-wrap">
                        <div class="d-flex flex-column gap-3 col-12 col-lg-7 mb-3 mb-md-0">
                            <div class="d-flex flex-column gap-2 h-100">
                                <div class="flex-grow-1" style="background-color: rgba(128, 128, 128, 0.3); min-height: 100px; flex-basis: 100px;"></div>
                                <div class="d-flex gap-2 flex-grow-1">
                                    <div class="flex-grow-1" style="background-color: rgba(128, 128, 128, 0.3); min-height: 100px; flex-basis: 100px;"></div>
                                    <div class="flex-grow-1" style="background-color: rgba(128, 128, 128, 0.3); min-height: 100px; flex-basis: 100px;"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-12 col-lg-4 mt-3">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                    <strong>Version:</strong>
                                    <span>@Model.Plugin.Version</span>
                                </li>
                                @if (!string.IsNullOrEmpty(Model.Plugin.Author))
                                {
                                    <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                        <strong>Developed By:</strong>
                                        <span><a href="@Model.Plugin.AuthorLink" rel="noreferrer noopener" target="_blank" class="text-success">@Model.Plugin.Author</a></span>
                                    </li>
                                }
                                <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                    <strong>Last Updated:</strong>
                                    <span>@Model.Plugin.BuildDate.ToTimeAgo()</span>
                                </li>
                                @if (Model.DownloadInfo?.Source is not null)
                                {
                                    <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                        <strong>Source Code:</strong>
                                        <span><a href="@Model.DownloadInfo.Source" rel="noreferrer noopener" class="d-flex align-items-center gap-2 text-success" target="_blank">View</a></span>
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(Model.DownloadInfo?.Documentation))
                                {
                                    <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                        <strong>Documentation:</strong>
                                        <span><a href="@Model.DownloadInfo.Documentation" rel="noreferrer noopener" class="d-flex align-items-center gap-2 text-success" target="_blank">View</a></span>
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(Model.DownloadInfo?.AuthorTwitter))
                                {
                                    <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                        <strong>Author Twitter:</strong>
                                        <span><a href="@Model.DownloadInfo.AuthorTwitter" rel="noreferrer noopener" class="d-flex align-items-center gap-2 text-success" target="_blank">View</a></span>
                                    </li>
                                }
                                @if (!string.IsNullOrEmpty(Model.DownloadInfo?.AuthorEmail))
                                {
                                    <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                        <strong>Author Email:</strong>
                                        <span><a href="mailto:@Model.DownloadInfo.AuthorEmail" rel="noreferrer noopener" class="d-flex align-items-center gap-2 text-success" target="_blank">Send a mail</a></span>
                                    </li>
                                }
                                <li class="list-group-item d-flex justify-content-between bg-transparent px-0">
                                    <strong>Dependency:</strong>
                                    <div>
                                        @foreach (var dependency in Model.Plugin.Dependencies)
                                        {
                                            <span>@dependency</span>
                                            <br />
                                        }
                                    </div>
                                </li>
                            </ul>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</div>

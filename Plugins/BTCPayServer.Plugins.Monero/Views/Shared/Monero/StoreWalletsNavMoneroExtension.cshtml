@using BTCPayServer.Abstractions.Contracts
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using BTCPayServer
@using BTCPayServer.Client
@using BTCPayServer.Plugins.Monero.UI
@inject IScopeProvider ScopeProvider
@inject UIMoneroLikeStoreController UIMoneroLikeStore;
@{
    var storeId = ScopeProvider.GetCurrentStoreId();


    var store = Context.GetStoreData();
    var result = await UIMoneroLikeStore.GetVM(store);

    foreach (var item in result.Items)
    {
        var isActive = !string.IsNullOrEmpty(storeId) && ViewContext.RouteData.Values.TryGetValue("Controller", out var controller) && controller is not null &&
                       nameof(UIMoneroLikeStoreController).StartsWith(controller.ToString() ?? string.Empty, StringComparison.InvariantCultureIgnoreCase) &&
                       ViewContext.RouteData.Values.TryGetValue("cryptoCode", out var cryptoCode) && cryptoCode is not null && cryptoCode.ToString() == item.CryptoCode;
        <li class="nav-item" permission="@Policies.CanModifyServerSettings">
            <a class="nav-link @(isActive ? "active" : "")"
               asp-route-cryptoCode="@item.CryptoCode"
               asp-route-storeId="@storeId"
               asp-action="GetStoreMoneroLikePaymentMethod"
               asp-controller="UIMoneroLikeStore">
                <span class="me-2 btcpay-status btcpay-status--@(item.Enabled ? "enabled" : "pending")"></span>
                <span>@item.CryptoCode Wallet</span>
            </a>
        </li>
    }
}
